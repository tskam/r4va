{
  "hash": "651ad6956e80ba0f295ac64e802d48b8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Time on the Horizon: ggHoriPlot methods \"\ndate: \"12/4/2023\"\ndate-modified: \"2025-01-09\"\nformat: html\nexecute: \n  echo: true\n  eval: true\n  warning: false\n  freeze: auto\neditor: visual  \n---\n\n\n\n\n\n\n## Overview\n\nA horizon graph is an analytical graphical method specially designed for visualising large numbers of time-series. It aims to overcome the issue of visualising highly overlapping time-series as shown in the figure below.\n\n![](chap20/img/image1.png)\n\nA horizon graph essentially an area chart that has been split into slices and the slices then layered on top of one another with the areas representing the highest (absolute) values on top. Each slice has a greater intensity of colour based on the absolute value it represents.\n\n![](chap20/img/image2.png)\n\nIn this section, you will learn how to plot a [horizon graph](http://www.perceptualedge.com/articles/visual_business_intelligence/time_on_the_horizon.pdf) by using [**ggHoriPlot**](https://rivasiker.github.io/ggHoriPlot/index.html) package.\n\n::: callout-tip\nBefore getting started, please visit [Getting Started](https://rivasiker.github.io/ggHoriPlot/articles/ggHoriPlot.html) to learn more about the functions of ggHoriPlot package. Next, read [`geom_horizon()`](https://rivasiker.github.io/ggHoriPlot/reference/geom_horizon.html) to learn more about the usage of its arguments.\n:::\n\n## Getting started\n\nBefore getting start, make sure that **ggHoriPlot** has been included in the `pacman::p_load(...)` statement above.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\npacman::p_load(ggHoriPlot, ggthemes, tidyverse)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npackage 'ggHoriPlot' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\tskam\\AppData\\Local\\Temp\\Rtmpiqnh9L\\downloaded_packages\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\npackage 'ggthemes' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\tskam\\AppData\\Local\\Temp\\Rtmpiqnh9L\\downloaded_packages\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### Step 1: Data Import\n\nFor the purpose of this hands-on exercise, [Average Retail Prices Of Selected Consumer Items](https://tablebuilder.singstat.gov.sg/table/TS/M212891) will be used.\n\nUse the code chunk below to import the AVERP.csv file into R environment.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naverp <- read_csv(\"data/AVERP.csv\") %>%\n  mutate(`Date` = dmy(`Date`))\n```\n:::\n\n\n\n\n\n\n::: callout-tip\n# Thing to learn from the code chunk above.\n\n-   By default, read_csv will import data in Date field as Character data type. [`dmy()`](https://lubridate.tidyverse.org/reference/ymd.html) of [**lubridate**](https://lubridate.tidyverse.org/index.html) package to palse the Date field into appropriate Date data type in R.\\\n:::\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n### Step 2: Plotting the horizon graph\n\nNext, the code chunk below will be used to plot the horizon graph.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naverp %>% \n  filter(Date >= \"2018-01-01\") %>%\n  ggplot() +\n  geom_horizon(aes(x = Date, y=Values), \n               origin = \"midpoint\", \n               horizonscale = 6)+\n  facet_grid(`Consumer Items`~.) +\n    theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n    scale_x_date(expand=c(0,0), date_breaks = \"3 month\", date_labels = \"%b%y\") +\n  ggtitle('Average Retail Prices of Selected Consumer Items (Jan 2018 to Dec 2022)')\n```\n\n::: {.cell-output-display}\n![](chap20_files/figure-html/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "chap20_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}