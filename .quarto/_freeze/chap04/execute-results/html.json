{
  "hash": "c2d91910815d814b378d36b7baef2ae9",
  "result": {
    "markdown": "---\ntitle: \"Programming Animated Statistical Graphics with R\"\ndate: \"12/4/2023\"\ndate-modified: \"2023-04-16\"\nformat: html\nexecute: \n  echo: true\n  eval: true\n  warning: false\n---\n\n\n## Learning Outcome\n\nIn this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotlyr packages.\n\nAt the same time, you will also learn how to:\n\n-   reshape data by using tidyr package, and\n\n-   process, wrangle and transform data by using dplyr package.\n\n## Getting Started\n\nFirst, write a code chunk to check, install and launch the following R packages:\n\n-   [**plotly**](https://plotly.com/r/), R library for plotting interactive statistical graphs.\n-   [**gganimate**](https://gganimate.com/), an ggplot extension for creating animated statistical graphs.\n-   [**tidyverse**](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\nThe solution:\n\n\n::: {.cell}\n\n:::\n\n\n## Animated Data Visualisation: gganimate methods\n\n[**gganimate**](https://gganimate.com/index.html) extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\n-   `transition_*()` defines how the data should be spread out and how it relates to itself across time.\n-   `view_*()` defines how the positional scales should change along the animation.\n-   `shadow_*()` defines how data from other points in time should be presented in the given point in time.\n-   `enter_*()/exit_*()` defines how new data should appear and how old data should disappear during the course of the animation.\n-   `ease_aes()` defines how different aesthetics should be eased during transitions.\n\n### Getting started\n\nAdd the following packages in the packages list:\n\n-   [**gganimate**](https://gganimate.com/index.html): An ggplot extension for creating animated statistical graphs.\n-   [**gifski**](https://cran.r-project.org/web/packages/gifski/index.html) converts video frames to GIF animations using pngquant's fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\n-   [**gapminder**](https://cran.r-project.org/web/packages/gapminder/index.html): An excerpt of the data available at Gapminder.org. We just want to use its *country_colors* scheme.\n\n### Importing the data\n\nIn this hands-on exercise, the *Data* worksheet from *GlobalPopulation* Excel workbook will be used.\n\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol <- c(\"Country\", \"Continent\")\nglobalPop <- read_xls(\"chap03/data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %>%\n  mutate_each_(funs(factor(.)), col) %>%\n  mutate(Year = as.integer(Year))\n```\n:::\n\n\n{.pullout-note} Things to learn from the code chunk above:\n\n-   [`read_xls()`](https://readxl.tidyverse.org/reference/read_excel.html) of **readxl** package is used to import the Excel worksheet.\n-   `mutate_each_()` of dplyr package is used to convert all character data type into factor.\n-   `mutate` of dplyr package is used to convert data values of Year field into integer.\n\n### Building a static population bubble plot\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](chap04_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n### Building the animated bubble plot\n\nIn the code chunk below,\n\n-   [`transition_time()`](https://gganimate.com/reference/transition_time.html) of **gganimate** is used to create transition through distinct states in time (i.e. Year).\n-   `ease_aes()` is used to control easing of aesthetics. The default is `linear`. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       #<<\n  ease_aes('linear')            #<<\n```\n:::\n\n\nThe animated bubble chart\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](chap04_files/figure-html/unnamed-chunk-6-1.gif)\n:::\n:::\n\n\n## Reference\n\n-   [Getting Started](https://gganimate.com/articles/gganimate.html)\n-   Visit this [link](https://rpubs.com/raymondteo/dataviz8) for a very interesting implementation of gganimate by your senior.\n-   [Building an animation step-by-step with gganimate](https://www.alexcookson.com/post/2020-10-18-building-an-animation-step-by-step-with-gganimate/).\n-   [Creating a composite gif with multiple gganimate panels](https://solarchemist.se/2021/08/02/composite-gif-gganimate/)\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "chap04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}