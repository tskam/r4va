{"title":"Programming Interactive Data Visualisation with R","markdown":{"yaml":{"title":"Programming Interactive Data Visualisation with R","date":"12/4/2023","date-modified":"`r Sys.Date()`","format":"html","execute":{"echo":true,"eval":true,"warning":false}},"headingText":"Learning Outcome","containsRefs":false,"markdown":"\n\n\nIn this hands-on exercise, you will learn how to create:\n\n-   interactive data visualisation by using ggiraph and plotlyr packages,\n\n-   animated data visualisation by using gganimate and plotlyr packages.\n\n-   Visualising univariate data with large number of categories by using rPackedBar package.\n\nAt the same time, you will also learn how to:\n\n-   reshape data by using tidyr package, and\n\n-   process, wrangle and transform data by using dplyr package.\n\n## Getting Started\n\nFirst, write a code chunk to check, install and launch the following R packages:\n\n-   [**ggiraph**](https://davidgohel.github.io/ggiraph/) for making 'ggplot' graphics interactive.\n-   [**plotly**](https://plotly.com/r/), R library for plotting interactive statistical graphs.\n-   [**gganimate**](https://gganimate.com/), an ggplot extension for creating animated statistical graphs.\n-   [**DT**](https://rstudio.github.io/DT/) provides an R interface to the JavaScript library [DataTables](https://datatables.net/) that create interactive table on html page.\n-   [**tidyverse**](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n-   [**patchwork**](https://patchwork.data-imaginist.com/) for compising multiple plots.\n\nThe solution:\n\n```{r}\n#| echo: false\npacman::p_load(ggiraph, plotly, DT, patchwork, gganimate, \n               tidyverse, readxl, gifski, gapminder, rPackedBar)\n```\n\n## Importing Data\n\nIn this section, Exam_data.csv provided will be used. Using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package, import *Exam_data.csv* into R.\n\nThe solution:\n\n```{r}\n#| echo: false\nexam_data <- read_csv(\"chap03/data/Exam_data.csv\")\n```\n\n## Interactive Data Visualisation - ggiraph methods\n\n-   [ggiraph](https://davidgohel.github.io/ggiraph/index.html) is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\n\n-   Interactive is made with [**ggplot geometries**](https://davidgohel.github.io/ggiraph/reference/index.html#section-interactive-geometries) that can understand three arguments:\n\n    -   **Tooltip**: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\n    -   **Onclick**: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\n    -   **Data_id**: a column of data-sets that contain an id to be associated with elements.\n\n-   If it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this [article](https://davidgohel.github.io/ggiraph/articles/offcran/shiny.html) for more detail explanation.\n\n### Tooltip effect with *tooltip* aesthetic\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using **ggiraph** package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, [`girafe()`](https://davidgohel.github.io/ggiraph/reference/girafe.html) of **ggiraph** will be used to create an interactive svg object.\n\n```{r}\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n```\n\nInteractivity: By hovering the mouse pointer on an data point of interest, the student's ID will be displayed.\n\n```{r echo=FALSE, eval=TRUE}\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(                  \n    aes(tooltip = ID),\n    stackgroups = TRUE,                      \n    binwidth = 1,                       \n    method = \"histodot\") +              \n  scale_y_continuous(NULL,              \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n```\n\n### Comparing ggplot2 and ggiraph codes\n\nThe original ggplot2 code chunk.\n\n```{r, echo=TRUE, eval=FALSE, fig.height=6, fig.width=8}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5, \n               dotsize = 0.5) +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n```\n\nThe ggiraph code chunk.\n\n```{r echo=TRUE, eval=FALSE}\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              #<<\n    aes(tooltip = ID),                   #<<\n    stackgroups = TRUE,                  #<<\n    binwidth = 1,                        #<<\n    method = \"histodot\") +               #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  #<<\n  ggobj = p,                             #<<\n  width_svg = 6,                         #<<\n  height_svg = 6*0.618                   #<<   \n)                                        #<<\n```\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. [`geom_dotplot_interactive()`](https://davidgohel.github.io/ggiraph/reference/geom_dotplot_interactive.html)) will be used to create the basic graph. Then, [`girafe()`](https://davidgohel.github.io/ggiraph/reference/girafe.html) will be used to generate an svg object to be displayed on an html page.\n\n### Displaying multiple information on tooltip\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\n```{r eval=FALSE}\nexam_data$tooltip <- c(paste0(     #<<\n  \"Name = \", exam_data$ID,         #<<\n  \"\\n Class = \", exam_data$CLASS)) #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), #<<\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n```\n\nInteractivity: By hovering the mouse pointer on an data point of interest, the student's ID and Class will be displayed.\n\n```{r echo=FALSE}\nexam_data$tooltip <- c(paste0(\"Name = \", exam_data$ID, \"\\n Class = \", exam_data$CLASS)) #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n```\n\nThe first three lines of codes in the code chunk create a new field called *tooltip*. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n### Customising Tooltip style\n\nCode chunk below uses [`opts_tooltip()`](https://davidgohel.github.io/ggiraph/reference/opts_tooltip.html) of **ggiraph** to customize tooltip rendering by add css declarations.\n\n```{r eval=FALSE}\ntooltip_css <- \"background-color:white; #<<\nfont-style:bold; color:black;\" #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #<<\n    opts_tooltip(    #<<\n      css = tooltip_css)) #<<\n)                                        \n```\n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\n```{r echo=FALSE}\ntooltip_css <- \"background-color:white;\nfont-style:bold; color:black;\"\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    \n    opts_tooltip(    \n      css = tooltip_css))\n)                                        \n```\n\n-   Refer to [Customizing girafe objects](https://davidgohel.github.io/ggiraph/articles/offcran/customizing.html) to learn more about how to customise ggiraph objects.\n\n### Displaying statistics on tooltip\n\n```{r eval=FALSE}\ntooltip <- function(y, ymax, accuracy = .01) {   #<<\n  mean <- scales::number(y, accuracy = accuracy) #<<\n  sem <- scales::number(ymax - y, accuracy = accuracy) #<<\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem) #<<\n} #<<\n\ngg_point <- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  #<<\n                     tooltip(y, ymax))),  #<<\n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  #<<\n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n```\n\nCode chunk on the left shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\n```{r echo=FALSE}\ntooltip <- function(y, ymax, accuracy = .01) {\n  mean <- scales::number(y, accuracy = accuracy)\n  sem <- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\np <- ggplot(data=exam_data, aes(x = RACE),) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(\n                     tooltip(y, ymax))),\n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,\n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = p,\n       width_svg = 8,\n       height_svg = 8*0.618)\n```\n\n### Hover effect with *data_id* aesthetic\n\nCode chunk below show the second interactive feature of ggiraph, namely `data_id`.\n\n```{r echo=TRUE, eval=FALSE}\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             #<<\n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n```\n\nInteractivity: Elements associated with a *data_id* (i.e CLASS) will be highlighted upon mouse over.\n\n```{r echo=FALSE, eval=TRUE}\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n```\n\nNote that the default value of the hover css is *hover_css = \"fill:orange;\"*.\n\n### Styling hover effect\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\n```{r echo=TRUE, eval=FALSE}\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        #<<\n    opts_hover(css = \"fill: #202020;\"),  #<<\n    opts_hover_inv(css = \"opacity:0.2;\") #<<\n  )                                      #<<  \n)                                        \n```\n\nInteractivity: Elements associated with a *data_id* (i.e CLASS) will be highlighted upon mouse over.\n\n```{r echo=FALSE, eval=TRUE}\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                         \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)                                        \n```\n\nNote: Different from Slide 9, in this example the ccs customisation request are encoded directly.\n\n### Combining tooltip and hover effect\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\n```{r echo=TRUE, eval=FALSE}\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, #<<\n        data_id = CLASS),#<<              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n```\n\nInteractivity: Elements associated with a *data_id* (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n```{r echo=FALSE, eval=TRUE}\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS,\n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                         \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)                                        \n```\n\n### Click effect with **onclick**\n\n`onclick` argument of ggiraph provides hotlink interactivity on ther web.\n\nThe code chunk below shown an example of `onclick`.\n\n```{r echo=TRUE, eval=FALSE}\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              #<<\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n```\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n```{r echo=FALSE, eval=TRUE}\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\", as.character(exam_data$ID) )\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              #<<\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)\n```\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n### Coordinated Multiple Views with **ggiraph**\n\nCoordinated multiple views methods has been implemented in the data visualisation on the right.\n\n-   when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\n\n```{r echo=FALSE}\np1 <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 <- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 / p2),\n       width_svg = 6,\n       height_svg = 6,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )                                        \n```\n\n### Coordinated Multiple Views with **ggiraph**\n\nIn order to build a coordinated multiple views, the following programming strategy will be used:\n\n1.  Appropriate interactive functions of **ggiraph** will be used to create the multiple views.\n2.  *patchwork* function of [patchwork](https://patchwork.data-imaginist.com/) package will be used inside girafe function to create the interactive coordinated multiple views.\n\n```{r eval=FALSE}\np1 <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n```\n\n```{r eval=FALSE}\np2 <- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 / p2), #<<\n       width_svg = 6,\n       height_svg = 6,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n```\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\n## Interactive Data Visualisation - plotly methods!\n\n-   Plotly's R graphing library create interactive web graphics from **ggplot2** graphs and/or a custom interface to the (MIT-licensed) JavaScript library [**plotly.js**](https://plotly.com/javascript/) inspired by the grammar of graphics.\n-   Different from other plotly platform, plot.R is free and open source.\n\n![](img/image7-2.jpg)\n\nThere are two ways to create interactive graph by using plotly, they are:\n\n-   by using *plot_ly()*, and\n-   by using *ggplotly()*\n\n### Creating an interactive scatter plot: plot_ly() method\n\nThe code chunk below plots an interactive scatter plot by using *plot_ly()*.\n\n```{r eval=FALSE}\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n```\n\nThe output:\n\n```{r echo=FALSE, eval=TRUE}\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n```\n\n### Working with visual variable: plot_ly() method\n\nIn the code chunk below, *color* argument is mapped to a qualitative visual variable (i.e. RACE).\n\n```{r eval=FALSE}\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE) #<<\n```\n\nInteractive:\n\n-   Click on the colour symbol at the legend.\n\n```{r echo=FALSE, fig.height=6}\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n```\n\n### Changing colour pallete: plot_ly() method\n\nIn the code chunk below, *colors* argument is used to change the default colour palette to [ColorBrewel](https://www.r-graph-gallery.com/38-rcolorbrewers-palettes.html) colour palette.\n\n```{r eval=FALSE}\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE, \n        colors = \"Set1\") #<<\n```\n\nInteractive:\n\n-   Click on the colour symbol at the legend.\n\n```{r echo=FALSE, fig.height=6}\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE, \n        colors = \"Set1\") #<<\n```\n\n### Customising colour scheme: plot_ly() method\n\nIn the code chunk below, a customised colour scheme is created. Then, *colors* argument is used to change the default colour palette to the customised colour scheme.\n\n```{r eval=FALSE}\npal <- c(\"red\", \"purple\", \"blue\", \"green\") #<<\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE, \n        colors = pal) #<<\n```\n\nInteractive:\n\n-   Click on the colour symbol at the legend.\n\n```{r echo=FALSE, fig.height=6}\npal <- c(\"red\", \"purple\", \"blue\", \"green\")\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE, \n        colors = pal)\n```\n\n### Customising tooltip: plot_ly() method\n\nIn the code chunk below, *text* argument is used to change the default tooltip.\n\n```{r eval=FALSE}\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS,\n        text = ~paste(\"Student ID:\", ID,     #<<\n                      \"<br>Class:\", CLASS),  #<<\n        color = ~RACE, \n        colors = \"Set1\")\n```\n\nInteractive:\n\n-   Click on the colour symbol at the legend.\n\n```{r echo=FALSE, fig.height=6}\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS,\n        text = ~paste(\"Student ID:\", ID, \n                      \"<br>Class:\", CLASS),\n        color = ~RACE, \n        colors = \"Set1\") #<<\n```\n\n### Working with layout: plot_ly() method\n\nIn the code chunk below, *layout* argument is used to change the default tooltip.\n\n```{r eval=FALSE}\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS,\n        text = ~paste(\"Student ID:\", ID,     \n                      \"<br>Class:\", CLASS),  \n        color = ~RACE, \n        colors = \"Set1\") %>%\n  layout(title = 'English Score versus Maths Score ', #<<\n         xaxis = list(range = c(0, 100)),             #<<\n         yaxis = list(range = c(0, 100)))             #<<\n```\n\nTo learn more about layout, visit this [link](https://plotly.com/r/reference/#Layout_and_layout_style_objects).\n\nInteractive:\n\n-   Click on the colour symbol at the legend.\n\n```{r echo=FALSE, fig.height=6}\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS,\n        text = ~paste(\"Student ID:\", ID, \n                      \"<br>Class:\", CLASS),\n        color = ~RACE, \n        colors = \"Set1\") %>%\n  layout(title = 'English Score versus Maths Score ',\n         xaxis = list(range = c(0, 100)),\n         yaxis = list(range = c(0,100)))\n```\n\n### Creating an interactive scatter plot: ggplotly() method\n\nThe code chunk below plots an interactive scatter plot by using *ggplotly()*.\n\n```{r, eval=FALSE}\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(dotsize = 1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p) #<<\n\n```\n\nNotice that the only extra line you need to include in the code chunk is *ggplotly()*.\n\n```{r, echo=FALSE,  eval=TRUE}\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n```\n\n### Coordinated Multiple Views with **plotly**\n\nCode chunk below plots two scatterplots and places them next to each other side-by-side by using [*subplot()*](https://plotly.com/r/subplots/) of **plotly** package.\n\n```{r echo=TRUE, eval=FALSE}\np1 <- ggplot(data=exam_data, \n              aes(x = MATHS,\n                  y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),            #<<\n        ggplotly(p2))            #<<\n```\n\nThe side-by-side scatterplots.\n\n```{r echo=FALSE, eval=TRUE, fig.height=4}\np1 <- ggplot(data=exam_data, \n              aes(x = MATHS,\n                  y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n```\n\nNotice that these two scatter plots are not linked.\n\n### Coordinated Multiple Views with **plotly**\n\nTo create a coordinated scatterplots, [`highlight_key()`](https://www.rdocumentation.org/packages/plotly/versions/4.9.2/topics/highlight_key) of **plotly** package is used.\n\n```{r echo=TRUE, eval=FALSE}\nd <- highlight_key(exam_data)  #<<\np1 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n```\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n```{r echo=FALSE, eval=TRUE, fig.height=4}\nd <- highlight_key(exam_data)\np1 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n```\n\nThing to learn from the code chunk:\n\n-   `highlight_key()` simply creates an object of class [crosstalk::SharedData](https://rdrr.io/cran/crosstalk/man/SharedData.html).\\\n-   Visit this [link](https://rstudio.github.io/crosstalk/) to learn more about crosstalk,\n\n## Interactive Data Visualisation - crosstalk methods!\n\n[Crosstalk](https://rstudio.github.io/crosstalk/index.html) is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n### Interactive Data Table: DT package\n\n-   A wrapper of the JavaScript Library [DataTables](https://datatables.net/)\n\n-   Data objects in R can be rendered as HTML tables using the JavaScript library 'DataTables' (typically via R Markdown or Shiny).\n\n```{r out.width = \"80%\", out.height = \"50px\"}\nDT::datatable(exam_data, class= \"compact\")\n```\n\n### Linked brushing: crosstalk method\n\n```{r echo=FALSE}\nd <- highlight_key(exam_data)\np <- ggplot(d, aes(ENGLISH, MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg <- highlight(ggplotly(p), \n                \"plotly_selected\")\n\ncrosstalk::bscols(gg, DT::datatable(d), widths = 5)\n```\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\n```{r echo=TRUE, eval=FALSE}\nd <- highlight_key(exam_data) \np <- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg <- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n```\n\nThings to learn from the code chunk:\n\n-   *highlight()* is a function of **plotly** package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\n\n-   *bscols()* is a helper function of **crosstalk** package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. **Warning:** This will bring in all of Bootstrap!.\n\n## Visualising Large Data Interactively\n\nIn this hands-on exercise you will learn how to visualise large data by using packed bar methods. For the purpose of this hands-on exercise, two data sets will be used. They are:\n\n-   *GDP.csv* provides GDP, GDP per capita and GDP PPP data for world countries from 2000 to 2020. The data was extracted from [World Development Indicators Database](https://databank.worldbank.org/source/world-development-indicators) of World Bank.\n\n-   *WorldCountry.csv* provides a list of country names and the continent they belong to extracted from [Statistics Times](https://statisticstimes.com/geography/countries-by-continents.php).\n\n-   Write a code chunk to import both data sets by using `read_csv()` of **readr** package.\n\nThe solution:\n\n```{r}\nGDP <- read_csv(\"chap03/data/GDP.csv\")\nWorldCountry <- read_csv(\"chap03/data/WorldCountry.csv\")\n```\n\nNote: It is always a good practice to check the data structure and examine data values in RStudio.\n\n### Data preparetion\n\nBefore programming the data visualisation, it is important for us to reshape, wrangle and transform the raw data to meet the data visualisation need.\n\nCode chunk below performs following tasks:\n\n-   [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) of dplyr package is used to convert all values in the 202 field into numeric data type.\n-   [`select()`](https://dplyr.tidyverse.org/reference/select.html) of dplyr package is used to extract column 1 to 3 and Values field.\n-   [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) of tidyr package is used to split the values in Series Name field into columns.\n-   [`left_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html) of dplyr package is used to perform a left-join by using Country Code of GDP_selected and ISO-alpha3 Code of WorldCountry tibble data tables as unique identifier.\n\n```{r}\nGDP_selected <- GDP %>%\n  mutate(Values = as.numeric(`2020`)) %>%\n  select(1:3, Values) %>%\n  pivot_wider(names_from = `Series Name`,\n              values_from = `Values`) %>%\n  left_join(y=WorldCountry, by = c(\"Country Code\" = \"ISO-alpha3 Code\"))\n```\n\n### Introducing packed bar method\n\n-   **packed bar** is a relatively new data visualisation method introduced by Xan Gregg from JMP.\\\n-   It aims to support the need of visualising skewed data over hundreds of categories.\\\n-   The idea is to support the [Focus+Context](https://infovis-wiki.net/wiki/Focus-plus-Context) data visualization principle.\n-   Visit this [JMP Blog](https://community.jmp.com/t5/JMP-Blog/Introducing-packed-bars-a-new-chart-form/ba-p/39972) to learn more about the design principles of packed bar.\n\n![](img/image3-4.png)\n\n### Data Preparation\n\nAs usual, we need to prepare the data before building the packed bar. Prepare the data by using the code chunk below.\n\n```{r}\nGDP_selected <- GDP %>%\n  mutate(GDP = as.numeric(`2020`)) %>%\n  filter(`Series Name` == \"GDP (current US$)\") %>%\n  select(1:2, GDP) %>%\n  na.omit()\n```\n\n::: pullout-note\n### Thing to learn from the code chunk above\n\n-   `na.omit()` is used to exclude rows with missing values. This is because rPackedBar package does not support missing values.\\\n:::\n\n### Building a packed bar by using rPackedBar package.\n\nIn the code chunk below, `plotly_packed_bar()` of [rPackedBar](https://cran.r-project.org/web/packages/rPackedBar/index.html) package is used to create an interactive packed bar.\n\n```{r eval=FALSE}\np = plotly_packed_bar(\n  input_data = GDP_selected,\n  label_column = \"Country Name\",\n  value_column = \"GDP\",\n  number_rows = 10,\n  plot_title = \"Top 10 countries by GDP, 2020\",\n  xaxis_label = \"GDP (US$)\",\n  hover_label = \"GDP\",\n  min_label_width = 0.018,\n  color_bar_color = \"#00aced\",\n  label_color = \"white\")\nplotly::config(p, displayModeBar = FALSE)\n```\n\n-   Read this [Vignettes](https://cran.r-project.org/web/packages/rPackedBar/vignettes/Visualizing_Twitter_Data_with_a_Packed_Barchart.html) and the [user guide](https://cran.r-project.org/web/packages/rPackedBar/rPackedBar.pdf) to learn more about the package.\n\nThe output packed bar:\n\n```{r echo=FALSE}\np = plotly_packed_bar(\n  input_data = GDP_selected,\n  label_column = \"Country Name\",\n  value_column = \"GDP\",\n  number_rows = 10,\n  plot_title = \"Top 10 countries by GDP, 2020\",\n  xaxis_label = \"GDP (US$)\",\n  hover_label = \"GDP\",\n  min_label_width = 0.018,\n  color_bar_color = \"#00aced\",\n  label_color = \"white\")\nplotly::config(p, displayModeBar = FALSE)\n```\n\n## Reference\n\n### ggiraph\n\nThis [link](https://davidgohel.github.io/ggiraph/index.html) provides online version of the reference guide and several useful articles. Use this [link](https://cran.r-project.org/web/packages/ggiraph/ggiraph.pdf) to download the pdf version of the reference guide.\n\n-   [How to Plot With Ggiraph](https://www.r-bloggers.com/2018/04/how-to-plot-with-ggiraph/)\n-   [Interactive map of France with ggiraph](http://rstudio-pubs-static.s3.amazonaws.com/152833_56a4917734204de7b37881d164cf8051.html)\\\n-   [Custom interactive sunbursts with ggplot in R](https://www.pipinghotdata.com/posts/2021-06-01-custom-interactive-sunbursts-with-ggplot-in-r/)\n-   This [link](https://github.com/d-qn/2016_08_02_rioOlympicsAthletes) provides code example on how ggiraph is used to interactive graphs for [Swiss Olympians - the solo specialists](https://www.swissinfo.ch/eng/rio-2016-_swiss-olympiansthe-solo-specialists-/42349156?utm_content=bufferd148b&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer).\n\n### plotly for R\n\n-   [Getting Started with Plotly in R](https://plotly.com/r/getting-started/)\n-   A collection of plotly R graphs are available via this [link](https://plotly.com/r/).\n-   Carson Sievert (2020) **Interactive web-based data visualization with R, plotly, and shiny**, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this [link](https://plotly-r.com/)\n-   [Plotly R Figure Reference](https://plotly.com/r/reference/index/) provides a comprehensive discussion of each visual representations.\n-   [Plotly R Library Fundamentals](https://plotly.com/r/plotly-fundamentals/) is a good place to learn the fundamental features of Plotly's R API.\n-   [Getting Started](https://gganimate.com/articles/gganimate.html)\n-   Visit this [link](https://rpubs.com/raymondteo/dataviz8) for a very interesting implementation of gganimate by your senior.\n-   [Building an animation step-by-step with gganimate](https://www.alexcookson.com/post/2020-10-18-building-an-animation-step-by-step-with-gganimate/).\n-   [Creating a composite gif with multiple gganimate panels](https://solarchemist.se/2021/08/02/composite-gif-gganimate/)\n\n### Packed Bar\n\n[rPackedBar](https://cran.r-project.org/web/packages/rPackedBar/index.html): Packed Bar Charts with 'plotly'\n\n-   [Visualizing Twitter Data with a Packed Barchart](https://cran.r-project.org/web/packages/rPackedBar/vignettes/Visualizing_Twitter_Data_with_a_Packed_Barchart.html)\n\n```{r}\n#| eval: false\n#| echo: false\nrenderthis::to_pdf(from = \"https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex03/hands-on_ex03-programming%20interactive%20visualisation.html\")\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"chap03.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","bibliography":["references.bib"],"editor":"visual","theme":"cosmo","title":"Programming Interactive Data Visualisation with R","date":"12/4/2023","date-modified":"`r Sys.Date()`"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"chap03.pdf"},"language":{},"metadata":{"block-headings":true,"bibliography":["references.bib"],"editor":"visual","documentclass":"scrreprt","title":"Programming Interactive Data Visualisation with R","date":"12/4/2023","date-modified":"`r Sys.Date()`"},"extensions":{"book":{}}}}}