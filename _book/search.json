[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Visual Analytics",
    "section": "",
    "text": "Preface\nWelcome to R for Visual Analytics. This book aims to share with you the principles, the methods and the R tools specially designed to meet the challenges of visualising and analysing data. I hope that it is helpful to you when you cruising into the rough seas of Visual Analytics."
  },
  {
    "objectID": "chap01.html#learning-outcome",
    "href": "chap01.html#learning-outcome",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.1 Learning Outcome",
    "text": "1.1 Learning Outcome\nIn this chapter, you will learn the basic principles and essential components of ggplot2. At the same time, you will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter you will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "chap01.html#getting-started",
    "href": "chap01.html#getting-started",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.2 Getting started",
    "text": "1.2 Getting started\n\n1.2.1 Installing and loading the required libraries\nBefore we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk on the right assumes that you already have pacman package installed. If not, please go ahead install pacman first.\n\n\n\npacman::p_load(tidyverse)\n\n\n\n1.2.2 Importing data\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data <- read_csv(\"chap01/data/Exam_data.csv\")\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "chap01.html#introducing-ggplot",
    "href": "chap01.html#introducing-ggplot",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.3 Introducing ggplot ",
    "text": "1.3 Introducing ggplot \nIt is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics\n\nIt is also part of the tidyverse family specially designed for visual exploration and communication.\n\n\nFor more detail, visit ggplot2 link.\n\n\n1.3.1 R Graphics VS ggplot\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?\nAs pointed out by Hadley Wickham\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "chap01.html#grammar-of-graphics",
    "href": "chap01.html#grammar-of-graphics",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.4 Grammar of Graphics",
    "text": "1.4 Grammar of Graphics\nBefore we getting started using ggplot2, it is important for us to understand the principles of Grammer of Graphics.\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\n\nWhat is a statistical graphic?\n\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n1.4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\n\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "chap01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "chap01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.5 Essential Grammatical Elements in ggplot2: data",
    "text": "1.5 Essential Grammatical Elements in ggplot2: data\nLet us call the ggplot() function using the code chunk on the right.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify()."
  },
  {
    "objectID": "chap01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "chap01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings",
    "text": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label."
  },
  {
    "objectID": "chap01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "chap01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7 Essential Grammatical Elements in ggplot2: geom",
    "text": "1.7 Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n1.7.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n1.7.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\nBe warned\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n1.7.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\n1.7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n1.7.5 Modifying a geometric object by changing aes()\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\n1.7.6 Geometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n1.7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n1.7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n1.7.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n1.7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "chap01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "chap01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8 Essential Grammatical Elements in ggplot2: stat",
    "text": "1.8 Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n1.8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n1.8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n1.8.3 Working with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\n\n\n\n\n\n1.8.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\n\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe default method used is loess.\n\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)"
  },
  {
    "objectID": "chap01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "chap01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9 Essential Grammatical Elements in ggplot2: Facets",
    "text": "1.9 Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n1.9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n1.9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "chap01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "chap01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10 Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "1.10 Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\n-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped.\n-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a \"fixed\" aspect ratio (e.g. 1.78 for a \"widescreen\" plot).\n-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.\n\n1.10.1 Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n1.10.2 Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "chap01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "chap01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.11 Essential Grammatical Elements in ggplot2: themes",
    "text": "1.11 Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n1.11.1 Working with theme\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "chap01.html#reference",
    "href": "chap01.html#reference",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.12 Reference",
    "text": "1.12 Reference\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "chap02.html#learning-outcome",
    "href": "chap02.html#learning-outcome",
    "title": "2  Beyond ggplot2 Fundamentals",
    "section": "2.1 Learning Outcome",
    "text": "2.1 Learning Outcome"
  },
  {
    "objectID": "chap03.html#learning-outcome",
    "href": "chap03.html#learning-outcome",
    "title": "3  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "3.1 Learning Outcome",
    "text": "3.1 Learning Outcome"
  },
  {
    "objectID": "chap04.html#learning-outcome",
    "href": "chap04.html#learning-outcome",
    "title": "4  R for Data Science: Tidyverse principles and methods",
    "section": "4.1 Learning Outcome",
    "text": "4.1 Learning Outcome"
  },
  {
    "objectID": "chap05.html#learning-outcome",
    "href": "chap05.html#learning-outcome",
    "title": "5  R for Data Science: Tidyverse principles and methods",
    "section": "5.1 Learning Outcome",
    "text": "5.1 Learning Outcome"
  },
  {
    "objectID": "chap06.html#learning-outcome",
    "href": "chap06.html#learning-outcome",
    "title": "6  R for Data Science: Tidyverse principles and methods",
    "section": "6.1 Learning Outcome",
    "text": "6.1 Learning Outcome"
  },
  {
    "objectID": "chap07.html#learning-outcome",
    "href": "chap07.html#learning-outcome",
    "title": "7  R for Data Science: Tidyverse principles and methods",
    "section": "7.1 Learning Outcome",
    "text": "7.1 Learning Outcome"
  },
  {
    "objectID": "chap08.html#learning-outcome",
    "href": "chap08.html#learning-outcome",
    "title": "8  R for Data Science: Tidyverse principles and methods",
    "section": "8.1 Learning Outcome",
    "text": "8.1 Learning Outcome"
  },
  {
    "objectID": "chap09.html#learning-outcome",
    "href": "chap09.html#learning-outcome",
    "title": "9  R for Data Science: Tidyverse principles and methods",
    "section": "9.1 Learning Outcome",
    "text": "9.1 Learning Outcome"
  },
  {
    "objectID": "chap10.html#learning-outcome",
    "href": "chap10.html#learning-outcome",
    "title": "10  R for Data Science: Tidyverse principles and methods",
    "section": "10.1 Learning Outcome",
    "text": "10.1 Learning Outcome"
  },
  {
    "objectID": "chap11.html#learning-outcome",
    "href": "chap11.html#learning-outcome",
    "title": "11  R for Data Science: Tidyverse principles and methods",
    "section": "11.1 Learning Outcome",
    "text": "11.1 Learning Outcome"
  },
  {
    "objectID": "chap12.html#learning-outcome",
    "href": "chap12.html#learning-outcome",
    "title": "12  R for Data Science: Tidyverse principles and methods",
    "section": "12.1 Learning Outcome",
    "text": "12.1 Learning Outcome"
  },
  {
    "objectID": "chap13.html#learning-outcome",
    "href": "chap13.html#learning-outcome",
    "title": "13  R for Data Science: Tidyverse principles and methods",
    "section": "13.1 Learning Outcome",
    "text": "13.1 Learning Outcome"
  },
  {
    "objectID": "chap14.html#learning-outcome",
    "href": "chap14.html#learning-outcome",
    "title": "14  R for Data Science: Tidyverse principles and methods",
    "section": "14.1 Learning Outcome",
    "text": "14.1 Learning Outcome"
  },
  {
    "objectID": "chap15.html#learning-outcome",
    "href": "chap15.html#learning-outcome",
    "title": "15  R for Data Science: Tidyverse principles and methods",
    "section": "15.1 Learning Outcome",
    "text": "15.1 Learning Outcome"
  },
  {
    "objectID": "chap16.html#learning-outcome",
    "href": "chap16.html#learning-outcome",
    "title": "16  R for Data Science: Tidyverse principles and methods",
    "section": "16.1 Learning Outcome",
    "text": "16.1 Learning Outcome"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "21  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "chap02.html#content",
    "href": "chap02.html#content",
    "title": "2  Beyond ggplot2 Fundamentals",
    "section": "2.2 Content",
    "text": "2.2 Content\n\nBeyond ggplot2 Themes\nBeyond ggplot2 Annotation\nBeyond ggplot2 facet"
  },
  {
    "objectID": "chap02.html#getting-started",
    "href": "chap02.html#getting-started",
    "title": "2  Beyond ggplot2 Fundamentals",
    "section": "2.3 Getting started",
    "text": "2.3 Getting started\n\n2.3.1 Installing and loading the required libraries\nBefore we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.\nThe chunk code on the right will do the trick.\n\npacman::p_load(tidyverse, patchwork, \n               ggthemes, hrbrthemes,\n               ggrepel) \n\n\n\n2.3.2 Importing data\nThe code chunk below imports exam_data.csv into R environment using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data <- read_csv(\"chap02/data/Exam_data.csv\")\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "chap02.html#beyond-ggplot2-annotation",
    "href": "chap02.html#beyond-ggplot2-annotation",
    "title": "2  Beyond ggplot2 Fundamentals",
    "section": "2.4 Beyond ggplot2 Annotation",
    "text": "2.4 Beyond ggplot2 Annotation\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n2.4.1 Working with ggrepel\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right. We simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "chap02.html#beyond-ggplot2-themes",
    "href": "chap02.html#beyond-ggplot2-themes",
    "title": "2  Beyond ggplot2 Fundamentals",
    "section": "2.5 Beyond ggplot2 Themes",
    "text": "2.5 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +  \n  ggtitle(\"Distribution of Maths scores\") \n\n\n\nRefer to this link to learn more about ggplot2 Themes\n\n:::\n\n\n\n\n\n\n\n:::\n\n\n2.5.1 Working with ggtheme package\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\n\n\n\n\n\n\n\n\n\n\n\n\n2.5.2 Working with hrbthems package\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\n\n\n\n\n\n\n\n\n\n\n\n2.5.3 Working with hrbthems package\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18, \n              base_size = 15, \n              grid = \"Y\") \n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk below?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "chap02.html#beyond-ggplot2-facet",
    "href": "chap02.html#beyond-ggplot2-facet",
    "title": "2  Beyond ggplot2 Fundamentals",
    "section": "2.6 Beyond ggplot2 facet",
    "text": "2.6 Beyond ggplot2 facet\n\n\nIn this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics.\n\n\np1 <- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\np2 <- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\n\np3 <- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n2.6.1 Creating Composite Graphics: pathwork methods\n\n\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, I am going to shared with you patchwork.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines: - Two-Column Layout using the Plus Sign +. - Parenthesis () to create a subplot group. - Two-Row Layout using the Division Sign \\\n\n\n\n\n\n\n\n2.6.2 Working with patchwork\n\n\np1 + p2 / p3\n\n\n\n\n\n\n\n\n2.6.3 Working with patchwork\n| will place the plots beside each other, while / will stack them.\n\n\n(p1 / p2) | p3\n\n\n\n\n\nTo learn more about, refer to Plot Assembly.\n\n\n\n2.6.4 Working with patchwork\npatchwork also provides auto-tagging capabilities, in order to identify subplots in text:\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n2.6.5 Working with patchwork\n\n\npatchwork <- (p1 / p2) | p3\npatchwork & theme_economist()\n\n\n\n\n\n\n\n\n2.6.6 Working with patchwork\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "chap02.html#reference",
    "href": "chap02.html#reference",
    "title": "2  Beyond ggplot2 Fundamentals",
    "section": "2.7 Reference",
    "text": "2.7 Reference\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "chap03.html#overview",
    "href": "chap03.html#overview",
    "title": "3  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "3.1 Overview",
    "text": "3.1 Overview\nDeveloped in 1932 by Rensis Likert to measure attitudes, the typical Likert scale is a 5- or 7-point ordinal scale used by respondents to rate the degree to which they agree or disagree with a statement (table). In an ordinal scale, responses can be rated or ranked, but the distance between responses is not measurable. Thus, the differences between “always,” “often,” and “sometimes” on a frequency response Likert scale are not necessarily equal. In other words, one cannot assume that the difference between responses is equidistant even though the numbers assigned to those responses are.\nDiverging stacked bar charts are often the best choice when visualizing Likert scale data. There are various ways to produce these graphs, there are:\n\nlikert package,\nlikert function of HH package, and\nplot_liker function of sjPlot package\n\nIn this hands-on exercise, we will focus on using likert function of HH package."
  },
  {
    "objectID": "chap03.html#data-preparation",
    "href": "chap03.html#data-preparation",
    "title": "3  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "3.2 Data Preparation",
    "text": "3.2 Data Preparation\n\n3.2.1 Installing and launching R packages\nFor this exercise, the HH R package will be used. You are also need to ensure that the tidyverse family packages also used install.\nThe code chunks below will accomplish the task.\n\npacman::p_load(HH, tidyverse)\n\n\n\n3.2.2 Importing Data\nFirst, important the data into R by using the code below.\n\nraw <- read_csv(\"chap03/data/SurveyData.csv\")\n\nNotice that all the variables are categorical data type."
  },
  {
    "objectID": "chap03.html#data-preparation-1",
    "href": "chap03.html#data-preparation-1",
    "title": "3  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "3.3 Data Preparation",
    "text": "3.3 Data Preparation\n\n3.3.1 Making the table long\nThe data has responses for different questions in columns. The questions data in columns are gathered into rows with the tidyr’s gather function\n\nsurvey <- gather(raw, measure, response, c(5:12))\n\n\n\n3.3.2 Converting to factor\nThe measure and response columns are recoded as factors.\n\nsurvey$measure <- as.factor(survey$measure)\nsurvey$response <- as.factor(survey$response)\n\n\n\n3.3.3 It is about time\nThe data is filtered by Month using the filter function from dplyr.\n\nOct <- filter(survey, Month==\"Oct\")\nNov <- filter(survey, Month==\"Nov\")\n\n\n\n3.3.4 Creating the contingency table\nThe data is tabulated into a contingency table by measure and response (satisfaction rating)\n\nOct_df <- table(Oct$measure,Oct$response) %>%\n  as.data.frame.matrix()\n\nNov_df <- table(Nov$measure,Nov$response) %>% \n  as.data.frame.matrix()\n\n\n\n3.3.5 Changing the column name\nThe column names are changed to reflect the satisfaction rating (Very Poor, Poor, Satisfactory, Good, Excellent) instead of the number scale( 1,2,3,4,5). The number “0” is recoded as “Missing”. The row names are changed to the actual 8 questions instead of using the names Measure 1 to Measure 8\n\ncolnames(Oct_df) <- c(\"No_Resp\",\"Very Poor\",\"Poor\",\"Satisfactory\",\"Good\",\"Excellent\")\n\nrownames(Oct_df)<-c(\"Temperature of Food\",\"Timeliness of Meals Served\",\"Accuracy of Meals Served\",\"Courtesy of Food Service Staff\",\"Portion Size of Meals Served\",\"Taste of Meals Served\",\"Variety of Food Provided in Menu\",\"Presentation of Meals Served\")\n\ncolnames(Nov_df) <- c(\"No_Resp\",\"Very Poor\",\"Poor\",\"Satisfactory\",\"Good\",\"Excellent\")\n\nrownames(Nov_df) <- c(\"Temperature of Food\",\"Timeliness of Meals Served\",\"Accuracy of Meals Served\",\"Courtesy of Food Service Staff\",\"Portion Size of Meals Served\",\"Taste of Meals Served\",\"Variety of Food Provided in Menu\",\"Presentation of Meals Served\")\n\n\n\n3.3.6 Changing the dataframe row name\nThe R dataframe row names are converted into a column called Measure for better usage\n\nOct_df <- tibble::rownames_to_column(Oct_df, var=\"Measure\") \nNov_df <- tibble::rownames_to_column(Nov_df, var=\"Measure\") \n\n\n\n3.3.7 Excluding missing value\nThe column “Missing” is removed as we do not want to plot it as it would distort the chart.\n\nOct_df <- Oct_df[,c(1,3:7)]\nNov_df <- Nov_df[,c(1,3:7)]"
  },
  {
    "objectID": "chap03.html#working-with-likert-function-of-hh-package",
    "href": "chap03.html#working-with-likert-function-of-hh-package",
    "title": "3  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "3.4 Working with likert function of HH Package",
    "text": "3.4 Working with likert function of HH Package\nThe survey results are presented using stacked divergent barcharts using the likert function from the HH library in R.\n\n3.4.1 The basic diverging stacked bar chart\nBelow are the code chunk used to create the basic diverging stacked bar charts for the month of October of 2016.\n\nlikert(Measure ~ ., data=Oct_df, ylab=NULL,\n       ReferenceZero=3, as.percent=TRUE,\n       positive.order=TRUE, \n       main = list(\"Monthly Meal Service Satisfaction Survey Report, Oct 2016\",x=unit(.55, \"npc\")), \n       sub= list(\"Satisfaction Rating\",x=unit(.57, \"npc\")), \n       xlim=c(-40,-20,0,20,40,60,80,100),\n       strip=FALSE, \n       par.strip.text=list(cex=.7))\n\n\n\n\nThings to learn from the code chunk above:\n\nThe results are displayed as percentages using the as.percent=TRUE option.\n\nThe results are sorted by descending order using the positive.order=TRUE option.\n\nThe x-axis tick marks separtion is set to 20. Since we are using a divergent chart we have to define negative values as well.\nThe unit function is used to define the position of the main title and subtitle to ensure they are centered.\n\nThe count of responses for each question is displayed with tick marks.\n\nDIY: Plot a diverging bar chart for the month of November 2016.\nThe output should look similar to the figure below:\n\n\n\n\n\n\n\n3.4.2 Diverging Stacked Bar Charts with Two Categories\nWe try out the option of splitting the questions into Meal and Services categories.\n\nType <-c(\"Meal\",\"Service\",\"Service\",\"Service\",\"Meal\",\"Meal\",\"Meal\",\"Meal\")\nOct_df2<-cbind(Oct_df,Type)\nNov_df2<-cbind(Nov_df,Type)\n\nlikert(Measure ~ .| Type, data=Oct_df2,\n       layout=c(1,2),\n       scales=list(y=list(relation=\"free\")),\n       between=list(y=1),\n       strip.left=strip.custom(bg=\"gray97\"),\n       strip=FALSE,\n       par.strip.text=list(cex=1.1, lines=2),\n       ylab=NULL, \n       cex=1.2,\n       ReferenceZero=3,\n       as.percent=TRUE, \n       positive.order=TRUE, \n       main = list(\"Monthly Meal Service Satisfaction Survey Report, Oct 2016\",x=unit(.55, \"npc\")), \n       sub= list(\"Satisfaction Rating\",x=unit(.57, \"npc\")), \n       xlim=c(-40,-20,0,20,40,60,80,100),\n       resize.height.tuning=1)\n\n\n\n\nDIY: Plot a diverging bar chart with two categories for the month of November 2016.\nThe output should look similar to the figure below:\n\n\n\n\n\nCredit: This hands-on exercise was created base on DataViz Makeover 3 submission by David Ten Kao Yuan (ISSS608 AY2016-17T3)."
  },
  {
    "objectID": "chap04.html#overview",
    "href": "chap04.html#overview",
    "title": "4  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "4.1 Overview",
    "text": "4.1 Overview\nDeveloped in 1932 by Rensis Likert to measure attitudes, the typical Likert scale is a 5- or 7-point ordinal scale used by respondents to rate the degree to which they agree or disagree with a statement (table). In an ordinal scale, responses can be rated or ranked, but the distance between responses is not measurable. Thus, the differences between “always,” “often,” and “sometimes” on a frequency response Likert scale are not necessarily equal. In other words, one cannot assume that the difference between responses is equidistant even though the numbers assigned to those responses are.\nDiverging stacked bar charts are often the best choice when visualizing Likert scale data. There are various ways to produce these graphs, there are:\n\nlikert package,\nlikert function of HH package, and\nplot_liker function of sjPlot package\n\nIn this hands-on exercise, we will focus on using likert function of HH package."
  },
  {
    "objectID": "chap04.html#data-preparation",
    "href": "chap04.html#data-preparation",
    "title": "4  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "4.2 Data Preparation",
    "text": "4.2 Data Preparation\n\n4.2.1 Installing and launching R packages\nFor this exercise, the HH R package will be used. You are also need to ensure that the tidyverse family packages also used install.\nThe code chunks below will accomplish the task.\n\npacman::p_load(HH, tidyverse)\n\n\n\n4.2.2 Importing Data\nFirst, important the data into R by using the code below.\n\nraw <- read_csv(\"chap04/data/SurveyData.csv\")\n\nNotice that all the variables are categorical data type."
  },
  {
    "objectID": "chap04.html#data-preparation-1",
    "href": "chap04.html#data-preparation-1",
    "title": "4  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "4.3 Data Preparation",
    "text": "4.3 Data Preparation\n\n4.3.1 Making the table long\nThe data has responses for different questions in columns. The questions data in columns are gathered into rows with the tidyr’s gather function\n\nsurvey <- gather(raw, measure, response, c(5:12))\n\n\n\n4.3.2 Converting to factor\nThe measure and response columns are recoded as factors.\n\nsurvey$measure <- as.factor(survey$measure)\nsurvey$response <- as.factor(survey$response)\n\n\n\n4.3.3 It is about time\nThe data is filtered by Month using the filter function from dplyr.\n\nOct <- filter(survey, Month==\"Oct\")\nNov <- filter(survey, Month==\"Nov\")\n\n\n\n4.3.4 Creating the contingency table\nThe data is tabulated into a contingency table by measure and response (satisfaction rating)\n\nOct_df <- table(Oct$measure,Oct$response) %>%\n  as.data.frame.matrix()\n\nNov_df <- table(Nov$measure,Nov$response) %>% \n  as.data.frame.matrix()\n\n\n\n4.3.5 Changing the column name\nThe column names are changed to reflect the satisfaction rating (Very Poor, Poor, Satisfactory, Good, Excellent) instead of the number scale( 1,2,3,4,5). The number “0” is recoded as “Missing”. The row names are changed to the actual 8 questions instead of using the names Measure 1 to Measure 8\n\ncolnames(Oct_df) <- c(\"No_Resp\",\"Very Poor\",\"Poor\",\"Satisfactory\",\"Good\",\"Excellent\")\n\nrownames(Oct_df)<-c(\"Temperature of Food\",\"Timeliness of Meals Served\",\"Accuracy of Meals Served\",\"Courtesy of Food Service Staff\",\"Portion Size of Meals Served\",\"Taste of Meals Served\",\"Variety of Food Provided in Menu\",\"Presentation of Meals Served\")\n\ncolnames(Nov_df) <- c(\"No_Resp\",\"Very Poor\",\"Poor\",\"Satisfactory\",\"Good\",\"Excellent\")\n\nrownames(Nov_df) <- c(\"Temperature of Food\",\"Timeliness of Meals Served\",\"Accuracy of Meals Served\",\"Courtesy of Food Service Staff\",\"Portion Size of Meals Served\",\"Taste of Meals Served\",\"Variety of Food Provided in Menu\",\"Presentation of Meals Served\")\n\n\n\n4.3.6 Changing the dataframe row name\nThe R dataframe row names are converted into a column called Measure for better usage\n\nOct_df <- tibble::rownames_to_column(Oct_df, var=\"Measure\") \nNov_df <- tibble::rownames_to_column(Nov_df, var=\"Measure\") \n\n\n\n4.3.7 Excluding missing value\nThe column “Missing” is removed as we do not want to plot it as it would distort the chart.\n\nOct_df <- Oct_df[,c(1,3:7)]\nNov_df <- Nov_df[,c(1,3:7)]"
  },
  {
    "objectID": "chap04.html#working-with-likert-function-of-hh-package",
    "href": "chap04.html#working-with-likert-function-of-hh-package",
    "title": "4  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "4.4 Working with likert function of HH Package",
    "text": "4.4 Working with likert function of HH Package\nThe survey results are presented using stacked divergent barcharts using the likert function from the HH library in R.\n\n4.4.1 The basic diverging stacked bar chart\nBelow are the code chunk used to create the basic diverging stacked bar charts for the month of October of 2016.\n\nlikert(Measure ~ ., data=Oct_df, ylab=NULL,\n       ReferenceZero=3, as.percent=TRUE,\n       positive.order=TRUE, \n       main = list(\"Monthly Meal Service Satisfaction Survey Report, Oct 2016\",x=unit(.55, \"npc\")), \n       sub= list(\"Satisfaction Rating\",x=unit(.57, \"npc\")), \n       xlim=c(-40,-20,0,20,40,60,80,100),\n       strip=FALSE, \n       par.strip.text=list(cex=.7))\n\n\n\n\nThings to learn from the code chunk above:\n\nThe results are displayed as percentages using the as.percent=TRUE option.\n\nThe results are sorted by descending order using the positive.order=TRUE option.\n\nThe x-axis tick marks separtion is set to 20. Since we are using a divergent chart we have to define negative values as well.\nThe unit function is used to define the position of the main title and subtitle to ensure they are centered.\n\nThe count of responses for each question is displayed with tick marks.\n\nDIY: Plot a diverging bar chart for the month of November 2016.\nThe output should look similar to the figure below:\n\n\n\n\n\n\n\n4.4.2 Diverging Stacked Bar Charts with Two Categories\nWe try out the option of splitting the questions into Meal and Services categories.\n\nType <-c(\"Meal\",\"Service\",\"Service\",\"Service\",\"Meal\",\"Meal\",\"Meal\",\"Meal\")\nOct_df2<-cbind(Oct_df,Type)\nNov_df2<-cbind(Nov_df,Type)\n\nlikert(Measure ~ .| Type, data=Oct_df2,\n       layout=c(1,2),\n       scales=list(y=list(relation=\"free\")),\n       between=list(y=1),\n       strip.left=strip.custom(bg=\"gray97\"),\n       strip=FALSE,\n       par.strip.text=list(cex=1.1, lines=2),\n       ylab=NULL, \n       cex=1.2,\n       ReferenceZero=3,\n       as.percent=TRUE, \n       positive.order=TRUE, \n       main = list(\"Monthly Meal Service Satisfaction Survey Report, Oct 2016\",x=unit(.55, \"npc\")), \n       sub= list(\"Satisfaction Rating\",x=unit(.57, \"npc\")), \n       xlim=c(-40,-20,0,20,40,60,80,100),\n       resize.height.tuning=1)\n\n\n\n\nDIY: Plot a diverging bar chart with two categories for the month of November 2016.\nThe output should look similar to the figure below:\n\n\n\n\n\nCredit: This hands-on exercise was created base on DataViz Makeover 3 submission by David Ten Kao Yuan (ISSS608 AY2016-17T3)."
  }
]