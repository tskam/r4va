[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Visual Analytics",
    "section": "",
    "text": "Preface\nWelcome to R for Visual Analytics. This book aims to share with you the principles, the methods and the R tools specially designed to meet the challenges of visualising and analysing data. I hope that it is helpful to you when you cruising into the rough seas of Visual Analytics."
  },
  {
    "objectID": "chap01.html#learning-outcome",
    "href": "chap01.html#learning-outcome",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.1 Learning Outcome",
    "text": "1.1 Learning Outcome\nIn this chapter, you will learn the basic principles and essential components of ggplot2. At the same time, you will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter you will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "chap01.html#getting-started",
    "href": "chap01.html#getting-started",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.2 Getting started",
    "text": "1.2 Getting started\n\n1.2.1 Installing and loading the required libraries\nBefore we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk on the right assumes that you already have pacman package installed. If not, please go ahead install pacman first.\n\n\n\npacman::p_load(tidyverse)\n\n\n\n1.2.2 Importing data\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data <- read_csv(\"chap01/data/Exam_data.csv\")\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "chap01.html#introducing-ggplot",
    "href": "chap01.html#introducing-ggplot",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.3 Introducing ggplot ",
    "text": "1.3 Introducing ggplot \nIt is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics\n\nIt is also part of the tidyverse family specially designed for visual exploration and communication.\n\n\nFor more detail, visit ggplot2 link.\n\n\n1.3.1 R Graphics VS ggplot\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?\nAs pointed out by Hadley Wickham\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "chap01.html#grammar-of-graphics",
    "href": "chap01.html#grammar-of-graphics",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.4 Grammar of Graphics",
    "text": "1.4 Grammar of Graphics\nBefore we getting started using ggplot2, it is important for us to understand the principles of Grammer of Graphics.\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\n\nWhat is a statistical graphic?\n\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n1.4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\n\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "chap01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "chap01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.5 Essential Grammatical Elements in ggplot2: data",
    "text": "1.5 Essential Grammatical Elements in ggplot2: data\nLet us call the ggplot() function using the code chunk on the right.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify()."
  },
  {
    "objectID": "chap01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "chap01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings",
    "text": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label."
  },
  {
    "objectID": "chap01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "chap01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7 Essential Grammatical Elements in ggplot2: geom",
    "text": "1.7 Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n1.7.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n1.7.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\nBe warned\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n1.7.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\n1.7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n1.7.5 Modifying a geometric object by changing aes()\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\n1.7.6 Geometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n1.7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n1.7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n1.7.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n1.7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "chap01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "chap01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8 Essential Grammatical Elements in ggplot2: stat",
    "text": "1.8 Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n1.8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n1.8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n1.8.3 Working with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\n\n\n\n\n\n1.8.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\n\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe default method used is loess.\n\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)"
  },
  {
    "objectID": "chap01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "chap01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9 Essential Grammatical Elements in ggplot2: Facets",
    "text": "1.9 Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n1.9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n1.9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "chap01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "chap01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10 Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "1.10 Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\n-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped.\n-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a \"fixed\" aspect ratio (e.g. 1.78 for a \"widescreen\" plot).\n-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.\n\n1.10.1 Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n1.10.2 Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "chap01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "chap01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.11 Essential Grammatical Elements in ggplot2: themes",
    "text": "1.11 Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n1.11.1 Working with theme\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "chap01.html#reference",
    "href": "chap01.html#reference",
    "title": "1  A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.12 Reference",
    "text": "1.12 Reference\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "chap02.html#learning-outcome",
    "href": "chap02.html#learning-outcome",
    "title": "2  Beyond ggplot2 Fundamentals",
    "section": "2.1 Learning Outcome",
    "text": "2.1 Learning Outcome"
  },
  {
    "objectID": "chap03.html#learning-outcome",
    "href": "chap03.html#learning-outcome",
    "title": "3  Programming Interactive Data Visualisation with R",
    "section": "3.1 Learning Outcome",
    "text": "3.1 Learning Outcome\nIn this hands-on exercise, you will learn how to create:\n\ninteractive data visualisation by using ggiraph and plotlyr packages,\nanimated data visualisation by using gganimate and plotlyr packages.\nVisualising univariate data with large number of categories by using rPackedBar package.\n\nAt the same time, you will also learn how to:\n\nreshape data by using tidyr package, and\nprocess, wrangle and transform data by using dplyr package."
  },
  {
    "objectID": "chap04.html#learning-outcome",
    "href": "chap04.html#learning-outcome",
    "title": "4  Programming Animated Statistical Graphics with R",
    "section": "4.1 Learning Outcome",
    "text": "4.1 Learning Outcome\nIn this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotlyr packages.\nAt the same time, you will also learn how to:\n\nreshape data by using tidyr package, and\nprocess, wrangle and transform data by using dplyr package."
  },
  {
    "objectID": "chap05.html#learning-outcome",
    "href": "chap05.html#learning-outcome",
    "title": "5  R for Data Science: Tidyverse principles and methods",
    "section": "5.1 Learning Outcome",
    "text": "5.1 Learning Outcome"
  },
  {
    "objectID": "chap06.html#learning-outcome",
    "href": "chap06.html#learning-outcome",
    "title": "6  R for Data Science: Tidyverse principles and methods",
    "section": "6.1 Learning Outcome",
    "text": "6.1 Learning Outcome"
  },
  {
    "objectID": "chap07.html#learning-outcome",
    "href": "chap07.html#learning-outcome",
    "title": "7  R for Data Science: Tidyverse principles and methods",
    "section": "7.1 Learning Outcome",
    "text": "7.1 Learning Outcome"
  },
  {
    "objectID": "chap08.html#learning-outcome",
    "href": "chap08.html#learning-outcome",
    "title": "8  R for Data Science: Tidyverse principles and methods",
    "section": "8.1 Learning Outcome",
    "text": "8.1 Learning Outcome"
  },
  {
    "objectID": "chap09.html#learning-outcome",
    "href": "chap09.html#learning-outcome",
    "title": "9  Visual Statistical Analysis",
    "section": "9.1 Learning Outcome",
    "text": "9.1 Learning Outcome\nIn this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "chap10.html#learning-outcome",
    "href": "chap10.html#learning-outcome",
    "title": "10  Visualising Uncertainty",
    "section": "10.1 Learning Outcome",
    "text": "10.1 Learning Outcome"
  },
  {
    "objectID": "chap11.html#learning-outcome",
    "href": "chap11.html#learning-outcome",
    "title": "11  R for Data Science: Tidyverse principles and methods",
    "section": "11.1 Learning Outcome",
    "text": "11.1 Learning Outcome"
  },
  {
    "objectID": "chap12.html#learning-outcome",
    "href": "chap12.html#learning-outcome",
    "title": "12  R for Data Science: Tidyverse principles and methods",
    "section": "12.1 Learning Outcome",
    "text": "12.1 Learning Outcome"
  },
  {
    "objectID": "chap13.html#learning-outcome",
    "href": "chap13.html#learning-outcome",
    "title": "13  R for Data Science: Tidyverse principles and methods",
    "section": "13.1 Learning Outcome",
    "text": "13.1 Learning Outcome"
  },
  {
    "objectID": "chap14.html#learning-outcome",
    "href": "chap14.html#learning-outcome",
    "title": "14  R for Data Science: Tidyverse principles and methods",
    "section": "14.1 Learning Outcome",
    "text": "14.1 Learning Outcome"
  },
  {
    "objectID": "chap15.html#learning-outcome",
    "href": "chap15.html#learning-outcome",
    "title": "15  R for Data Science: Tidyverse principles and methods",
    "section": "15.1 Learning Outcome",
    "text": "15.1 Learning Outcome"
  },
  {
    "objectID": "chap16.html#learning-outcome",
    "href": "chap16.html#learning-outcome",
    "title": "16  R for Data Science: Tidyverse principles and methods",
    "section": "16.1 Learning Outcome",
    "text": "16.1 Learning Outcome"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "21  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "chap02.html#content",
    "href": "chap02.html#content",
    "title": "2  Beyond ggplot2 Fundamentals",
    "section": "2.2 Content",
    "text": "2.2 Content\n\nBeyond ggplot2 Themes\nBeyond ggplot2 Annotation\nBeyond ggplot2 facet"
  },
  {
    "objectID": "chap02.html#getting-started",
    "href": "chap02.html#getting-started",
    "title": "2  Beyond ggplot2 Fundamentals",
    "section": "2.3 Getting started",
    "text": "2.3 Getting started\n\n2.3.1 Installing and loading the required libraries\nBefore we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.\nThe chunk code on the right will do the trick.\n\npacman::p_load(tidyverse, patchwork, \n               ggthemes, hrbrthemes,\n               ggrepel) \n\n\n\n2.3.2 Importing data\nThe code chunk below imports exam_data.csv into R environment using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data <- read_csv(\"chap02/data/Exam_data.csv\")\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "chap02.html#beyond-ggplot2-annotation",
    "href": "chap02.html#beyond-ggplot2-annotation",
    "title": "2  Beyond ggplot2 Fundamentals",
    "section": "2.4 Beyond ggplot2 Annotation",
    "text": "2.4 Beyond ggplot2 Annotation\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n2.4.1 Working with ggrepel\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right. We simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "chap02.html#beyond-ggplot2-themes",
    "href": "chap02.html#beyond-ggplot2-themes",
    "title": "2  Beyond ggplot2 Fundamentals",
    "section": "2.5 Beyond ggplot2 Themes",
    "text": "2.5 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +  \n  ggtitle(\"Distribution of Maths scores\") \n\n\n\nRefer to this link to learn more about ggplot2 Themes\n\n:::\n\n\n\n\n\n\n\n:::\n\n\n2.5.1 Working with ggtheme package\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\n\n\n\n\n\n\n\n\n\n\n\n\n2.5.2 Working with hrbthems package\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\n\n\n\n\n\n\n\n\n\n\n\n2.5.3 Working with hrbthems package\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18, \n              base_size = 15, \n              grid = \"Y\") \n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk below?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "chap02.html#beyond-ggplot2-facet",
    "href": "chap02.html#beyond-ggplot2-facet",
    "title": "2  Beyond ggplot2 Fundamentals",
    "section": "2.6 Beyond ggplot2 facet",
    "text": "2.6 Beyond ggplot2 facet\n\n\nIn this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics.\n\n\np1 <- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\np2 <- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\n\np3 <- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n2.6.1 Creating Composite Graphics: pathwork methods\n\n\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, I am going to shared with you patchwork.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines: - Two-Column Layout using the Plus Sign +. - Parenthesis () to create a subplot group. - Two-Row Layout using the Division Sign \\\n\n\n\n\n\n\n\n2.6.2 Working with patchwork\n\n\np1 + p2 / p3\n\n\n\n\n\n\n\n\n2.6.3 Working with patchwork\n| will place the plots beside each other, while / will stack them.\n\n\n(p1 / p2) | p3\n\n\n\n\n\nTo learn more about, refer to Plot Assembly.\n\n\n\n2.6.4 Working with patchwork\npatchwork also provides auto-tagging capabilities, in order to identify subplots in text:\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n2.6.5 Working with patchwork\n\n\npatchwork <- (p1 / p2) | p3\npatchwork & theme_economist()\n\n\n\n\n\n\n\n\n2.6.6 Working with patchwork\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "chap02.html#reference",
    "href": "chap02.html#reference",
    "title": "2  Beyond ggplot2 Fundamentals",
    "section": "2.7 Reference",
    "text": "2.7 Reference\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "chap03.html#overview",
    "href": "chap03.html#overview",
    "title": "3  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "3.1 Overview",
    "text": "3.1 Overview\nDeveloped in 1932 by Rensis Likert to measure attitudes, the typical Likert scale is a 5- or 7-point ordinal scale used by respondents to rate the degree to which they agree or disagree with a statement (table). In an ordinal scale, responses can be rated or ranked, but the distance between responses is not measurable. Thus, the differences between “always,” “often,” and “sometimes” on a frequency response Likert scale are not necessarily equal. In other words, one cannot assume that the difference between responses is equidistant even though the numbers assigned to those responses are.\nDiverging stacked bar charts are often the best choice when visualizing Likert scale data. There are various ways to produce these graphs, there are:\n\nlikert package,\nlikert function of HH package, and\nplot_liker function of sjPlot package\n\nIn this hands-on exercise, we will focus on using likert function of HH package."
  },
  {
    "objectID": "chap03.html#data-preparation",
    "href": "chap03.html#data-preparation",
    "title": "3  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "3.2 Data Preparation",
    "text": "3.2 Data Preparation\n\n3.2.1 Installing and launching R packages\nFor this exercise, the HH R package will be used. You are also need to ensure that the tidyverse family packages also used install.\nThe code chunks below will accomplish the task.\n\npacman::p_load(HH, tidyverse)\n\n\n\n3.2.2 Importing Data\nFirst, important the data into R by using the code below.\n\nraw <- read_csv(\"chap03/data/SurveyData.csv\")\n\nNotice that all the variables are categorical data type."
  },
  {
    "objectID": "chap03.html#data-preparation-1",
    "href": "chap03.html#data-preparation-1",
    "title": "3  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "3.3 Data Preparation",
    "text": "3.3 Data Preparation\n\n3.3.1 Making the table long\nThe data has responses for different questions in columns. The questions data in columns are gathered into rows with the tidyr’s gather function\n\nsurvey <- gather(raw, measure, response, c(5:12))\n\n\n\n3.3.2 Converting to factor\nThe measure and response columns are recoded as factors.\n\nsurvey$measure <- as.factor(survey$measure)\nsurvey$response <- as.factor(survey$response)\n\n\n\n3.3.3 It is about time\nThe data is filtered by Month using the filter function from dplyr.\n\nOct <- filter(survey, Month==\"Oct\")\nNov <- filter(survey, Month==\"Nov\")\n\n\n\n3.3.4 Creating the contingency table\nThe data is tabulated into a contingency table by measure and response (satisfaction rating)\n\nOct_df <- table(Oct$measure,Oct$response) %>%\n  as.data.frame.matrix()\n\nNov_df <- table(Nov$measure,Nov$response) %>% \n  as.data.frame.matrix()\n\n\n\n3.3.5 Changing the column name\nThe column names are changed to reflect the satisfaction rating (Very Poor, Poor, Satisfactory, Good, Excellent) instead of the number scale( 1,2,3,4,5). The number “0” is recoded as “Missing”. The row names are changed to the actual 8 questions instead of using the names Measure 1 to Measure 8\n\ncolnames(Oct_df) <- c(\"No_Resp\",\"Very Poor\",\"Poor\",\"Satisfactory\",\"Good\",\"Excellent\")\n\nrownames(Oct_df)<-c(\"Temperature of Food\",\"Timeliness of Meals Served\",\"Accuracy of Meals Served\",\"Courtesy of Food Service Staff\",\"Portion Size of Meals Served\",\"Taste of Meals Served\",\"Variety of Food Provided in Menu\",\"Presentation of Meals Served\")\n\ncolnames(Nov_df) <- c(\"No_Resp\",\"Very Poor\",\"Poor\",\"Satisfactory\",\"Good\",\"Excellent\")\n\nrownames(Nov_df) <- c(\"Temperature of Food\",\"Timeliness of Meals Served\",\"Accuracy of Meals Served\",\"Courtesy of Food Service Staff\",\"Portion Size of Meals Served\",\"Taste of Meals Served\",\"Variety of Food Provided in Menu\",\"Presentation of Meals Served\")\n\n\n\n3.3.6 Changing the dataframe row name\nThe R dataframe row names are converted into a column called Measure for better usage\n\nOct_df <- tibble::rownames_to_column(Oct_df, var=\"Measure\") \nNov_df <- tibble::rownames_to_column(Nov_df, var=\"Measure\") \n\n\n\n3.3.7 Excluding missing value\nThe column “Missing” is removed as we do not want to plot it as it would distort the chart.\n\nOct_df <- Oct_df[,c(1,3:7)]\nNov_df <- Nov_df[,c(1,3:7)]"
  },
  {
    "objectID": "chap03.html#working-with-likert-function-of-hh-package",
    "href": "chap03.html#working-with-likert-function-of-hh-package",
    "title": "3  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "3.4 Working with likert function of HH Package",
    "text": "3.4 Working with likert function of HH Package\nThe survey results are presented using stacked divergent barcharts using the likert function from the HH library in R.\n\n3.4.1 The basic diverging stacked bar chart\nBelow are the code chunk used to create the basic diverging stacked bar charts for the month of October of 2016.\n\nlikert(Measure ~ ., data=Oct_df, ylab=NULL,\n       ReferenceZero=3, as.percent=TRUE,\n       positive.order=TRUE, \n       main = list(\"Monthly Meal Service Satisfaction Survey Report, Oct 2016\",x=unit(.55, \"npc\")), \n       sub= list(\"Satisfaction Rating\",x=unit(.57, \"npc\")), \n       xlim=c(-40,-20,0,20,40,60,80,100),\n       strip=FALSE, \n       par.strip.text=list(cex=.7))\n\n\n\n\nThings to learn from the code chunk above:\n\nThe results are displayed as percentages using the as.percent=TRUE option.\n\nThe results are sorted by descending order using the positive.order=TRUE option.\n\nThe x-axis tick marks separtion is set to 20. Since we are using a divergent chart we have to define negative values as well.\nThe unit function is used to define the position of the main title and subtitle to ensure they are centered.\n\nThe count of responses for each question is displayed with tick marks.\n\nDIY: Plot a diverging bar chart for the month of November 2016.\nThe output should look similar to the figure below:\n\n\n\n\n\n\n\n3.4.2 Diverging Stacked Bar Charts with Two Categories\nWe try out the option of splitting the questions into Meal and Services categories.\n\nType <-c(\"Meal\",\"Service\",\"Service\",\"Service\",\"Meal\",\"Meal\",\"Meal\",\"Meal\")\nOct_df2<-cbind(Oct_df,Type)\nNov_df2<-cbind(Nov_df,Type)\n\nlikert(Measure ~ .| Type, data=Oct_df2,\n       layout=c(1,2),\n       scales=list(y=list(relation=\"free\")),\n       between=list(y=1),\n       strip.left=strip.custom(bg=\"gray97\"),\n       strip=FALSE,\n       par.strip.text=list(cex=1.1, lines=2),\n       ylab=NULL, \n       cex=1.2,\n       ReferenceZero=3,\n       as.percent=TRUE, \n       positive.order=TRUE, \n       main = list(\"Monthly Meal Service Satisfaction Survey Report, Oct 2016\",x=unit(.55, \"npc\")), \n       sub= list(\"Satisfaction Rating\",x=unit(.57, \"npc\")), \n       xlim=c(-40,-20,0,20,40,60,80,100),\n       resize.height.tuning=1)\n\n\n\n\nDIY: Plot a diverging bar chart with two categories for the month of November 2016.\nThe output should look similar to the figure below:\n\n\n\n\n\nCredit: This hands-on exercise was created base on DataViz Makeover 3 submission by David Ten Kao Yuan (ISSS608 AY2016-17T3)."
  },
  {
    "objectID": "chap04.html#overview",
    "href": "chap04.html#overview",
    "title": "4  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "4.1 Overview",
    "text": "4.1 Overview\nDeveloped in 1932 by Rensis Likert to measure attitudes, the typical Likert scale is a 5- or 7-point ordinal scale used by respondents to rate the degree to which they agree or disagree with a statement (table). In an ordinal scale, responses can be rated or ranked, but the distance between responses is not measurable. Thus, the differences between “always,” “often,” and “sometimes” on a frequency response Likert scale are not necessarily equal. In other words, one cannot assume that the difference between responses is equidistant even though the numbers assigned to those responses are.\nDiverging stacked bar charts are often the best choice when visualizing Likert scale data. There are various ways to produce these graphs, there are:\n\nlikert package,\nlikert function of HH package, and\nplot_liker function of sjPlot package\n\nIn this hands-on exercise, we will focus on using likert function of HH package."
  },
  {
    "objectID": "chap04.html#data-preparation",
    "href": "chap04.html#data-preparation",
    "title": "4  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "4.2 Data Preparation",
    "text": "4.2 Data Preparation\n\n4.2.1 Installing and launching R packages\nFor this exercise, the HH R package will be used. You are also need to ensure that the tidyverse family packages also used install.\nThe code chunks below will accomplish the task.\n\npacman::p_load(HH, tidyverse)\n\n\n\n4.2.2 Importing Data\nFirst, important the data into R by using the code below.\n\nraw <- read_csv(\"chap04/data/SurveyData.csv\")\n\nNotice that all the variables are categorical data type."
  },
  {
    "objectID": "chap04.html#data-preparation-1",
    "href": "chap04.html#data-preparation-1",
    "title": "4  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "4.3 Data Preparation",
    "text": "4.3 Data Preparation\n\n4.3.1 Making the table long\nThe data has responses for different questions in columns. The questions data in columns are gathered into rows with the tidyr’s gather function\n\nsurvey <- gather(raw, measure, response, c(5:12))\n\n\n\n4.3.2 Converting to factor\nThe measure and response columns are recoded as factors.\n\nsurvey$measure <- as.factor(survey$measure)\nsurvey$response <- as.factor(survey$response)\n\n\n\n4.3.3 It is about time\nThe data is filtered by Month using the filter function from dplyr.\n\nOct <- filter(survey, Month==\"Oct\")\nNov <- filter(survey, Month==\"Nov\")\n\n\n\n4.3.4 Creating the contingency table\nThe data is tabulated into a contingency table by measure and response (satisfaction rating)\n\nOct_df <- table(Oct$measure,Oct$response) %>%\n  as.data.frame.matrix()\n\nNov_df <- table(Nov$measure,Nov$response) %>% \n  as.data.frame.matrix()\n\n\n\n4.3.5 Changing the column name\nThe column names are changed to reflect the satisfaction rating (Very Poor, Poor, Satisfactory, Good, Excellent) instead of the number scale( 1,2,3,4,5). The number “0” is recoded as “Missing”. The row names are changed to the actual 8 questions instead of using the names Measure 1 to Measure 8\n\ncolnames(Oct_df) <- c(\"No_Resp\",\"Very Poor\",\"Poor\",\"Satisfactory\",\"Good\",\"Excellent\")\n\nrownames(Oct_df)<-c(\"Temperature of Food\",\"Timeliness of Meals Served\",\"Accuracy of Meals Served\",\"Courtesy of Food Service Staff\",\"Portion Size of Meals Served\",\"Taste of Meals Served\",\"Variety of Food Provided in Menu\",\"Presentation of Meals Served\")\n\ncolnames(Nov_df) <- c(\"No_Resp\",\"Very Poor\",\"Poor\",\"Satisfactory\",\"Good\",\"Excellent\")\n\nrownames(Nov_df) <- c(\"Temperature of Food\",\"Timeliness of Meals Served\",\"Accuracy of Meals Served\",\"Courtesy of Food Service Staff\",\"Portion Size of Meals Served\",\"Taste of Meals Served\",\"Variety of Food Provided in Menu\",\"Presentation of Meals Served\")\n\n\n\n4.3.6 Changing the dataframe row name\nThe R dataframe row names are converted into a column called Measure for better usage\n\nOct_df <- tibble::rownames_to_column(Oct_df, var=\"Measure\") \nNov_df <- tibble::rownames_to_column(Nov_df, var=\"Measure\") \n\n\n\n4.3.7 Excluding missing value\nThe column “Missing” is removed as we do not want to plot it as it would distort the chart.\n\nOct_df <- Oct_df[,c(1,3:7)]\nNov_df <- Nov_df[,c(1,3:7)]"
  },
  {
    "objectID": "chap04.html#working-with-likert-function-of-hh-package",
    "href": "chap04.html#working-with-likert-function-of-hh-package",
    "title": "4  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "4.4 Working with likert function of HH Package",
    "text": "4.4 Working with likert function of HH Package\nThe survey results are presented using stacked divergent barcharts using the likert function from the HH library in R.\n\n4.4.1 The basic diverging stacked bar chart\nBelow are the code chunk used to create the basic diverging stacked bar charts for the month of October of 2016.\n\nlikert(Measure ~ ., data=Oct_df, ylab=NULL,\n       ReferenceZero=3, as.percent=TRUE,\n       positive.order=TRUE, \n       main = list(\"Monthly Meal Service Satisfaction Survey Report, Oct 2016\",x=unit(.55, \"npc\")), \n       sub= list(\"Satisfaction Rating\",x=unit(.57, \"npc\")), \n       xlim=c(-40,-20,0,20,40,60,80,100),\n       strip=FALSE, \n       par.strip.text=list(cex=.7))\n\n\n\n\nThings to learn from the code chunk above:\n\nThe results are displayed as percentages using the as.percent=TRUE option.\n\nThe results are sorted by descending order using the positive.order=TRUE option.\n\nThe x-axis tick marks separtion is set to 20. Since we are using a divergent chart we have to define negative values as well.\nThe unit function is used to define the position of the main title and subtitle to ensure they are centered.\n\nThe count of responses for each question is displayed with tick marks.\n\nDIY: Plot a diverging bar chart for the month of November 2016.\nThe output should look similar to the figure below:\n\n\n\n\n\n\n\n4.4.2 Diverging Stacked Bar Charts with Two Categories\nWe try out the option of splitting the questions into Meal and Services categories.\n\nType <-c(\"Meal\",\"Service\",\"Service\",\"Service\",\"Meal\",\"Meal\",\"Meal\",\"Meal\")\nOct_df2<-cbind(Oct_df,Type)\nNov_df2<-cbind(Nov_df,Type)\n\nlikert(Measure ~ .| Type, data=Oct_df2,\n       layout=c(1,2),\n       scales=list(y=list(relation=\"free\")),\n       between=list(y=1),\n       strip.left=strip.custom(bg=\"gray97\"),\n       strip=FALSE,\n       par.strip.text=list(cex=1.1, lines=2),\n       ylab=NULL, \n       cex=1.2,\n       ReferenceZero=3,\n       as.percent=TRUE, \n       positive.order=TRUE, \n       main = list(\"Monthly Meal Service Satisfaction Survey Report, Oct 2016\",x=unit(.55, \"npc\")), \n       sub= list(\"Satisfaction Rating\",x=unit(.57, \"npc\")), \n       xlim=c(-40,-20,0,20,40,60,80,100),\n       resize.height.tuning=1)\n\n\n\n\nDIY: Plot a diverging bar chart with two categories for the month of November 2016.\nThe output should look similar to the figure below:\n\n\n\n\n\nCredit: This hands-on exercise was created base on DataViz Makeover 3 submission by David Ten Kao Yuan (ISSS608 AY2016-17T3)."
  },
  {
    "objectID": "chap03.html#getting-started",
    "href": "chap03.html#getting-started",
    "title": "3  Programming Interactive Data Visualisation with R",
    "section": "3.2 Getting Started",
    "text": "3.2 Getting Started\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for compising multiple plots.\n\nThe solution:"
  },
  {
    "objectID": "chap03.html#importing-data",
    "href": "chap03.html#importing-data",
    "title": "3  Programming Interactive Data Visualisation with R",
    "section": "3.3 Importing Data",
    "text": "3.3 Importing Data\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe solution:"
  },
  {
    "objectID": "chap03.html#interactive-data-visualisation---ggiraph-methods",
    "href": "chap03.html#interactive-data-visualisation---ggiraph-methods",
    "title": "3  Programming Interactive Data Visualisation with R",
    "section": "3.4 Interactive Data Visualisation - ggiraph methods",
    "text": "3.4 Interactive Data Visualisation - ggiraph methods\n\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\n3.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nInteractivity: By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\n3.4.2 Comparing ggplot2 and ggiraph codes\nThe original ggplot2 code chunk.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5, \n               dotsize = 0.5) +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n\nThe ggiraph code chunk.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              #<<\n    aes(tooltip = ID),                   #<<\n    stackgroups = TRUE,                  #<<\n    binwidth = 1,                        #<<\n    method = \"histodot\") +               #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  #<<\n  ggobj = p,                             #<<\n  width_svg = 6,                         #<<\n  height_svg = 6*0.618                   #<<   \n)                                        #<<\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n3.4.3 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip <- c(paste0(     #<<\n  \"Name = \", exam_data$ID,         #<<\n  \"\\n Class = \", exam_data$CLASS)) #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), #<<\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nInteractivity: By hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\n3.4.4 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css <- \"background-color:white; #<<\nfont-style:bold; color:black;\" #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #<<\n    opts_tooltip(    #<<\n      css = tooltip_css)) #<<\n)                                        \n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n3.4.5 Displaying statistics on tooltip\n\ntooltip <- function(y, ymax, accuracy = .01) {   #<<\n  mean <- scales::number(y, accuracy = accuracy) #<<\n  sem <- scales::number(ymax - y, accuracy = accuracy) #<<\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem) #<<\n} #<<\n\ngg_point <- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  #<<\n                     tooltip(y, ymax))),  #<<\n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  #<<\n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\nCode chunk on the left shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\n\n\n\n\n\n\n\n3.4.6 Hover effect with data_id aesthetic\nCode chunk below show the second interactive feature of ggiraph, namely data_id.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             #<<\n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n3.4.7 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        #<<\n    opts_hover(css = \"fill: #202020;\"),  #<<\n    opts_hover_inv(css = \"opacity:0.2;\") #<<\n  )                                      #<<  \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote: Different from Slide 9, in this example the ccs customisation request are encoded directly.\n\n\n3.4.8 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, #<<\n        data_id = CLASS),#<<              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\n\n\n\n\n\n3.4.9 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on ther web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              #<<\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n3.4.10 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation on the right.\n\nwhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\n\n\n\n\n\n\n\n\n\n3.4.11 Coordinated Multiple Views with ggiraph\nIn order to build a coordinated multiple views, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\n\np2 <- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 / p2), #<<\n       width_svg = 6,\n       height_svg = 6,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "chap03.html#interactive-data-visualisation---plotly-methods",
    "href": "chap03.html#interactive-data-visualisation---plotly-methods",
    "title": "3  Programming Interactive Data Visualisation with R",
    "section": "3.5 Interactive Data Visualisation - plotly methods!",
    "text": "3.5 Interactive Data Visualisation - plotly methods!\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics.\nDifferent from other plotly platform, plot.R is free and open source.\n\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n3.5.1 Creating an interactive scatter plot: plot_ly() method\nThe code chunk below plots an interactive scatter plot by using plot_ly().\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\nThe output:\n\n\n\n\n\n\n\n\n3.5.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE) #<<\n\nInteractive:\n\nClick on the colour symbol at the legend.\n\n\n\n\n\n\n\n\n\n3.5.3 Changing colour pallete: plot_ly() method\nIn the code chunk below, colors argument is used to change the default colour palette to ColorBrewel colour palette.\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE, \n        colors = \"Set1\") #<<\n\nInteractive:\n\nClick on the colour symbol at the legend.\n\n\n\n\n\n\n\n\n\n3.5.4 Customising colour scheme: plot_ly() method\nIn the code chunk below, a customised colour scheme is created. Then, colors argument is used to change the default colour palette to the customised colour scheme.\n\npal <- c(\"red\", \"purple\", \"blue\", \"green\") #<<\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE, \n        colors = pal) #<<\n\nInteractive:\n\nClick on the colour symbol at the legend.\n\n\n\n\n\n\n\n\n\n3.5.5 Customising tooltip: plot_ly() method\nIn the code chunk below, text argument is used to change the default tooltip.\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS,\n        text = ~paste(\"Student ID:\", ID,     #<<\n                      \"<br>Class:\", CLASS),  #<<\n        color = ~RACE, \n        colors = \"Set1\")\n\nInteractive:\n\nClick on the colour symbol at the legend.\n\n\n\n\n\n\n\n\n\n3.5.6 Working with layout: plot_ly() method\nIn the code chunk below, layout argument is used to change the default tooltip.\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS,\n        text = ~paste(\"Student ID:\", ID,     \n                      \"<br>Class:\", CLASS),  \n        color = ~RACE, \n        colors = \"Set1\") %>%\n  layout(title = 'English Score versus Maths Score ', #<<\n         xaxis = list(range = c(0, 100)),             #<<\n         yaxis = list(range = c(0, 100)))             #<<\n\nTo learn more about layout, visit this link.\nInteractive:\n\nClick on the colour symbol at the legend.\n\n\n\n\n\n\n\n\n\n3.5.7 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(dotsize = 1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p) #<<\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\n\n\n\n\n\n\n\n3.5.8 Coordinated Multiple Views with plotly\nCode chunk below plots two scatterplots and places them next to each other side-by-side by using subplot() of plotly package.\n\np1 <- ggplot(data=exam_data, \n              aes(x = MATHS,\n                  y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),            #<<\n        ggplotly(p2))            #<<\n\nThe side-by-side scatterplots.\n\n\n\n\n\n\nNotice that these two scatter plots are not linked.\n\n\n3.5.9 Coordinated Multiple Views with plotly\nTo create a coordinated scatterplots, highlight_key() of plotly package is used.\n\nd <- highlight_key(exam_data)  #<<\np1 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\n\nVisit this link to learn more about crosstalk,"
  },
  {
    "objectID": "chap03.html#interactive-data-visualisation---crosstalk-methods",
    "href": "chap03.html#interactive-data-visualisation---crosstalk-methods",
    "title": "3  Programming Interactive Data Visualisation with R",
    "section": "3.6 Interactive Data Visualisation - crosstalk methods!",
    "text": "3.6 Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n3.6.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n3.6.2 Linked brushing: crosstalk method\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd <- highlight_key(exam_data) \np <- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg <- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "chap03.html#animated-data-visualisation-gganimate-methods",
    "href": "chap03.html#animated-data-visualisation-gganimate-methods",
    "title": "3  Programming Interactive Data Visualisation with R",
    "section": "3.7 Animated Data Visualisation: gganimate methods",
    "text": "3.7 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n3.7.1 Getting started\nAdd the following packages in the packages list:\n\ngganimate: An ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\n\n\n\n3.7.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol <- c(\"Country\", \"Continent\")\nglobalPop <- read_xls(\"chap03/data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %>%\n  mutate_each_(funs(factor(.)), col) %>%\n  mutate(Year = as.integer(Year))\n\n{.pullout-note} Things to learn from the code chunk above:\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\n3.7.3 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n3.7.4 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       #<<\n  ease_aes('linear')            #<<\n\nThe animated bubble chart"
  },
  {
    "objectID": "chap03.html#visualising-large-data-interactively",
    "href": "chap03.html#visualising-large-data-interactively",
    "title": "3  Programming Interactive Data Visualisation with R",
    "section": "3.7 Visualising Large Data Interactively",
    "text": "3.7 Visualising Large Data Interactively\nIn this hands-on exercise you will learn how to visualise large data by using packed bar methods. For the purpose of this hands-on exercise, two data sets will be used. They are:\n\nGDP.csv provides GDP, GDP per capita and GDP PPP data for world countries from 2000 to 2020. The data was extracted from World Development Indicators Database of World Bank.\nWorldCountry.csv provides a list of country names and the continent they belong to extracted from Statistics Times.\nWrite a code chunk to import both data sets by using read_csv() of readr package.\n\nThe solution:\n\nGDP <- read_csv(\"chap03/data/GDP.csv\")\nWorldCountry <- read_csv(\"chap03/data/WorldCountry.csv\")\n\nNote: It is always a good practice to check the data structure and examine data values in RStudio.\n\n3.7.1 Data preparetion\nBefore programming the data visualisation, it is important for us to reshape, wrangle and transform the raw data to meet the data visualisation need.\nCode chunk below performs following tasks:\n\nmutate() of dplyr package is used to convert all values in the 202 field into numeric data type.\nselect() of dplyr package is used to extract column 1 to 3 and Values field.\npivot_wider() of tidyr package is used to split the values in Series Name field into columns.\nleft_join() of dplyr package is used to perform a left-join by using Country Code of GDP_selected and ISO-alpha3 Code of WorldCountry tibble data tables as unique identifier.\n\n\nGDP_selected <- GDP %>%\n  mutate(Values = as.numeric(`2020`)) %>%\n  select(1:3, Values) %>%\n  pivot_wider(names_from = `Series Name`,\n              values_from = `Values`) %>%\n  left_join(y=WorldCountry, by = c(\"Country Code\" = \"ISO-alpha3 Code\"))\n\n\n\n3.7.2 Introducing packed bar method\n\npacked bar is a relatively new data visualisation method introduced by Xan Gregg from JMP.\n\nIt aims to support the need of visualising skewed data over hundreds of categories.\n\nThe idea is to support the Focus+Context data visualization principle.\nVisit this JMP Blog to learn more about the design principles of packed bar.\n\n\n\n\n3.7.3 Data Preparation\nAs usual, we need to prepare the data before building the packed bar. Prepare the data by using the code chunk below.\n\nGDP_selected <- GDP %>%\n  mutate(GDP = as.numeric(`2020`)) %>%\n  filter(`Series Name` == \"GDP (current US$)\") %>%\n  select(1:2, GDP) %>%\n  na.omit()\n\n\n\n3.7.4 Thing to learn from the code chunk above\n\nna.omit() is used to exclude rows with missing values. This is because rPackedBar package does not support missing values.\n\n\n\n\n3.7.5 Building a packed bar by using rPackedBar package.\nIn the code chunk below, plotly_packed_bar() of rPackedBar package is used to create an interactive packed bar.\n\np = plotly_packed_bar(\n  input_data = GDP_selected,\n  label_column = \"Country Name\",\n  value_column = \"GDP\",\n  number_rows = 10,\n  plot_title = \"Top 10 countries by GDP, 2020\",\n  xaxis_label = \"GDP (US$)\",\n  hover_label = \"GDP\",\n  min_label_width = 0.018,\n  color_bar_color = \"#00aced\",\n  label_color = \"white\")\nplotly::config(p, displayModeBar = FALSE)\n\n\nRead this Vignettes and the user guide to learn more about the package.\n\nThe output packed bar:"
  },
  {
    "objectID": "chap03.html#reference",
    "href": "chap03.html#reference",
    "title": "3  Programming Interactive Data Visualisation with R",
    "section": "3.8 Reference",
    "text": "3.8 Reference\n\n3.8.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\n\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n3.8.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels\n\n\n\n3.8.3 Packed Bar\nrPackedBar: Packed Bar Charts with ‘plotly’\n\nVisualizing Twitter Data with a Packed Barchart"
  },
  {
    "objectID": "chap04.html#getting-started",
    "href": "chap04.html#getting-started",
    "title": "4  Programming Animated Statistical Graphics with R",
    "section": "4.2 Getting Started",
    "text": "4.2 Getting Started\nFirst, write a code chunk to check, install and launch the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\nThe solution:"
  },
  {
    "objectID": "chap04.html#animated-data-visualisation-gganimate-methods",
    "href": "chap04.html#animated-data-visualisation-gganimate-methods",
    "title": "4  Programming Animated Statistical Graphics with R",
    "section": "4.3 Animated Data Visualisation: gganimate methods",
    "text": "4.3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n4.3.1 Getting started\nAdd the following packages in the packages list:\n\ngganimate: An ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\n\n\n\n4.3.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol <- c(\"Country\", \"Continent\")\nglobalPop <- read_xls(\"chap03/data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %>%\n  mutate_each_(funs(factor(.)), col) %>%\n  mutate(Year = as.integer(Year))\n\n{.pullout-note} Things to learn from the code chunk above:\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\n4.3.3 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n4.3.4 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       #<<\n  ease_aes('linear')            #<<\n\nThe animated bubble chart"
  },
  {
    "objectID": "chap04.html#reference",
    "href": "chap04.html#reference",
    "title": "4  Programming Animated Statistical Graphics with R",
    "section": "4.4 Reference",
    "text": "4.4 Reference\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "chap05.html#overview",
    "href": "chap05.html#overview",
    "title": "5  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "5.1 Overview",
    "text": "5.1 Overview\nDeveloped in 1932 by Rensis Likert to measure attitudes, the typical Likert scale is a 5- or 7-point ordinal scale used by respondents to rate the degree to which they agree or disagree with a statement (table). In an ordinal scale, responses can be rated or ranked, but the distance between responses is not measurable. Thus, the differences between “always,” “often,” and “sometimes” on a frequency response Likert scale are not necessarily equal. In other words, one cannot assume that the difference between responses is equidistant even though the numbers assigned to those responses are.\nDiverging stacked bar charts are often the best choice when visualizing Likert scale data. There are various ways to produce these graphs, there are:\n\nlikert package,\nlikert function of HH package, and\nplot_liker function of sjPlot package\n\nIn this hands-on exercise, we will focus on using likert function of HH package."
  },
  {
    "objectID": "chap05.html#data-preparation",
    "href": "chap05.html#data-preparation",
    "title": "5  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "5.2 Data Preparation",
    "text": "5.2 Data Preparation\n\n5.2.1 Installing and launching R packages\nFor this exercise, the HH R package will be used. You are also need to ensure that the tidyverse family packages also used install.\nThe code chunks below will accomplish the task.\n\npacman::p_load(HH, tidyverse)\n\n\n\n5.2.2 Importing Data\nFirst, important the data into R by using the code below.\n\nraw <- read_csv(\"chap04/data/SurveyData.csv\")\n\nNotice that all the variables are categorical data type."
  },
  {
    "objectID": "chap05.html#data-preparation-1",
    "href": "chap05.html#data-preparation-1",
    "title": "5  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "5.3 Data Preparation",
    "text": "5.3 Data Preparation\n\n5.3.1 Making the table long\nThe data has responses for different questions in columns. The questions data in columns are gathered into rows with the tidyr’s gather function\n\nsurvey <- gather(raw, measure, response, c(5:12))\n\n\n\n5.3.2 Converting to factor\nThe measure and response columns are recoded as factors.\n\nsurvey$measure <- as.factor(survey$measure)\nsurvey$response <- as.factor(survey$response)\n\n\n\n5.3.3 It is about time\nThe data is filtered by Month using the filter function from dplyr.\n\nOct <- filter(survey, Month==\"Oct\")\nNov <- filter(survey, Month==\"Nov\")\n\n\n\n5.3.4 Creating the contingency table\nThe data is tabulated into a contingency table by measure and response (satisfaction rating)\n\nOct_df <- table(Oct$measure,Oct$response) %>%\n  as.data.frame.matrix()\n\nNov_df <- table(Nov$measure,Nov$response) %>% \n  as.data.frame.matrix()\n\n\n\n5.3.5 Changing the column name\nThe column names are changed to reflect the satisfaction rating (Very Poor, Poor, Satisfactory, Good, Excellent) instead of the number scale( 1,2,3,4,5). The number “0” is recoded as “Missing”. The row names are changed to the actual 8 questions instead of using the names Measure 1 to Measure 8\n\ncolnames(Oct_df) <- c(\"No_Resp\",\"Very Poor\",\"Poor\",\"Satisfactory\",\"Good\",\"Excellent\")\n\nrownames(Oct_df)<-c(\"Temperature of Food\",\"Timeliness of Meals Served\",\"Accuracy of Meals Served\",\"Courtesy of Food Service Staff\",\"Portion Size of Meals Served\",\"Taste of Meals Served\",\"Variety of Food Provided in Menu\",\"Presentation of Meals Served\")\n\ncolnames(Nov_df) <- c(\"No_Resp\",\"Very Poor\",\"Poor\",\"Satisfactory\",\"Good\",\"Excellent\")\n\nrownames(Nov_df) <- c(\"Temperature of Food\",\"Timeliness of Meals Served\",\"Accuracy of Meals Served\",\"Courtesy of Food Service Staff\",\"Portion Size of Meals Served\",\"Taste of Meals Served\",\"Variety of Food Provided in Menu\",\"Presentation of Meals Served\")\n\n\n\n5.3.6 Changing the dataframe row name\nThe R dataframe row names are converted into a column called Measure for better usage\n\nOct_df <- tibble::rownames_to_column(Oct_df, var=\"Measure\") \nNov_df <- tibble::rownames_to_column(Nov_df, var=\"Measure\") \n\n\n\n5.3.7 Excluding missing value\nThe column “Missing” is removed as we do not want to plot it as it would distort the chart.\n\nOct_df <- Oct_df[,c(1,3:7)]\nNov_df <- Nov_df[,c(1,3:7)]"
  },
  {
    "objectID": "chap05.html#working-with-likert-function-of-hh-package",
    "href": "chap05.html#working-with-likert-function-of-hh-package",
    "title": "5  Visualising Likert Scale Data with Divergining Stacked Bar Chart",
    "section": "5.4 Working with likert function of HH Package",
    "text": "5.4 Working with likert function of HH Package\nThe survey results are presented using stacked divergent barcharts using the likert function from the HH library in R.\n\n5.4.1 The basic diverging stacked bar chart\nBelow are the code chunk used to create the basic diverging stacked bar charts for the month of October of 2016.\n\nlikert(Measure ~ ., data=Oct_df, ylab=NULL,\n       ReferenceZero=3, as.percent=TRUE,\n       positive.order=TRUE, \n       main = list(\"Monthly Meal Service Satisfaction Survey Report, Oct 2016\",x=unit(.55, \"npc\")), \n       sub= list(\"Satisfaction Rating\",x=unit(.57, \"npc\")), \n       xlim=c(-40,-20,0,20,40,60,80,100),\n       strip=FALSE, \n       par.strip.text=list(cex=.7))\n\n\n\n\nThings to learn from the code chunk above:\n\nThe results are displayed as percentages using the as.percent=TRUE option.\n\nThe results are sorted by descending order using the positive.order=TRUE option.\n\nThe x-axis tick marks separtion is set to 20. Since we are using a divergent chart we have to define negative values as well.\nThe unit function is used to define the position of the main title and subtitle to ensure they are centered.\n\nThe count of responses for each question is displayed with tick marks.\n\nDIY: Plot a diverging bar chart for the month of November 2016.\nThe output should look similar to the figure below:\n\n\n\n\n\n\n\n5.4.2 Diverging Stacked Bar Charts with Two Categories\nWe try out the option of splitting the questions into Meal and Services categories.\n\nType <-c(\"Meal\",\"Service\",\"Service\",\"Service\",\"Meal\",\"Meal\",\"Meal\",\"Meal\")\nOct_df2<-cbind(Oct_df,Type)\nNov_df2<-cbind(Nov_df,Type)\n\nlikert(Measure ~ .| Type, data=Oct_df2,\n       layout=c(1,2),\n       scales=list(y=list(relation=\"free\")),\n       between=list(y=1),\n       strip.left=strip.custom(bg=\"gray97\"),\n       strip=FALSE,\n       par.strip.text=list(cex=1.1, lines=2),\n       ylab=NULL, \n       cex=1.2,\n       ReferenceZero=3,\n       as.percent=TRUE, \n       positive.order=TRUE, \n       main = list(\"Monthly Meal Service Satisfaction Survey Report, Oct 2016\",x=unit(.55, \"npc\")), \n       sub= list(\"Satisfaction Rating\",x=unit(.57, \"npc\")), \n       xlim=c(-40,-20,0,20,40,60,80,100),\n       resize.height.tuning=1)\n\n\n\n\nDIY: Plot a diverging bar chart with two categories for the month of November 2016.\nThe output should look similar to the figure below:\n\n\n\n\n\nCredit: This hands-on exercise was created base on DataViz Makeover 3 submission by David Ten Kao Yuan (ISSS608 AY2016-17T3)."
  },
  {
    "objectID": "chap17.html#learning-outcome",
    "href": "chap17.html#learning-outcome",
    "title": "18  R for Data Science: Tidyverse principles and methods",
    "section": "18.1 Learning Outcome",
    "text": "18.1 Learning Outcome"
  },
  {
    "objectID": "chap18.html#learning-outcome",
    "href": "chap18.html#learning-outcome",
    "title": "19  R for Data Science: Tidyverse principles and methods",
    "section": "19.1 Learning Outcome",
    "text": "19.1 Learning Outcome"
  },
  {
    "objectID": "chap19.html#learning-outcome",
    "href": "chap19.html#learning-outcome",
    "title": "20  R for Data Science: Tidyverse principles and methods",
    "section": "20.1 Learning Outcome",
    "text": "20.1 Learning Outcome"
  },
  {
    "objectID": "chap20.html#learning-outcome",
    "href": "chap20.html#learning-outcome",
    "title": "21  R for Data Science: Tidyverse principles and methods",
    "section": "21.1 Learning Outcome",
    "text": "21.1 Learning Outcome"
  },
  {
    "objectID": "chap21.html#learning-outcome",
    "href": "chap21.html#learning-outcome",
    "title": "22  R for Data Science: Tidyverse principles and methods",
    "section": "22.1 Learning Outcome",
    "text": "22.1 Learning Outcome"
  },
  {
    "objectID": "chap22.html#learning-outcome",
    "href": "chap22.html#learning-outcome",
    "title": "23  R for Data Science: Tidyverse principles and methods",
    "section": "23.1 Learning Outcome",
    "text": "23.1 Learning Outcome"
  },
  {
    "objectID": "chap23.html#learning-outcome",
    "href": "chap23.html#learning-outcome",
    "title": "24  R for Data Science: Tidyverse principles and methods",
    "section": "24.1 Learning Outcome",
    "text": "24.1 Learning Outcome"
  },
  {
    "objectID": "chap24.html#learning-outcome",
    "href": "chap24.html#learning-outcome",
    "title": "25  R for Data Science: Tidyverse principles and methods",
    "section": "25.1 Learning Outcome",
    "text": "25.1 Learning Outcome"
  },
  {
    "objectID": "chap25.html#learning-outcome",
    "href": "chap25.html#learning-outcome",
    "title": "25  R for Data Science: Tidyverse principles and methods",
    "section": "25.1 Learning Outcome",
    "text": "25.1 Learning Outcome"
  },
  {
    "objectID": "chap26.html#learning-outcome",
    "href": "chap26.html#learning-outcome",
    "title": "26  R for Data Science: Tidyverse principles and methods",
    "section": "26.1 Learning Outcome",
    "text": "26.1 Learning Outcome"
  },
  {
    "objectID": "chap27.html#learning-outcome",
    "href": "chap27.html#learning-outcome",
    "title": "27  R for Data Science: Tidyverse principles and methods",
    "section": "27.1 Learning Outcome",
    "text": "27.1 Learning Outcome"
  },
  {
    "objectID": "chap28.html#learning-outcome",
    "href": "chap28.html#learning-outcome",
    "title": "28  R for Data Science: Tidyverse principles and methods",
    "section": "28.1 Learning Outcome",
    "text": "28.1 Learning Outcome"
  },
  {
    "objectID": "chap29.html#learning-outcome",
    "href": "chap29.html#learning-outcome",
    "title": "29  R for Data Science: Tidyverse principles and methods",
    "section": "29.1 Learning Outcome",
    "text": "29.1 Learning Outcome"
  },
  {
    "objectID": "chap30.html#learning-outcome",
    "href": "chap30.html#learning-outcome",
    "title": "30  R for Data Science: Tidyverse principles and methods",
    "section": "30.1 Learning Outcome",
    "text": "30.1 Learning Outcome"
  },
  {
    "objectID": "chap31.html#learning-outcome",
    "href": "chap31.html#learning-outcome",
    "title": "31  R for Data Science: Tidyverse principles and methods",
    "section": "31.1 Learning Outcome",
    "text": "31.1 Learning Outcome"
  },
  {
    "objectID": "chap32.html#learning-outcome",
    "href": "chap32.html#learning-outcome",
    "title": "32  R for Data Science: Tidyverse principles and methods",
    "section": "32.1 Learning Outcome",
    "text": "32.1 Learning Outcome"
  },
  {
    "objectID": "chap09.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "chap09.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "9  Visual Statistical Analysis",
    "section": "9.2 Visual Statistical Analysis with ggstatsplot",
    "text": "9.2 Visual Statistical Analysis with ggstatsplot\n\n\nggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting. For example, here are results from a robust t-test:"
  },
  {
    "objectID": "chap09.html#getting-started",
    "href": "chap09.html#getting-started",
    "title": "9  Visual Statistical Analysis",
    "section": "9.3 Getting Started",
    "text": "9.3 Getting Started\n\n9.3.1 Installing and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n9.3.2 Importing data\n\n\n\n\n\n\nDo-It-Yourself\n\n\n\nImporting Exam.csv data by using appropriate tidyverse package.\n\n\n\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows\n\n\n\n\n9.3.3 One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n9.3.4 Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\n9.3.5 How to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\n9.3.6 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n9.3.7 Oneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n9.3.7.1 ggbetweenstats - Summary of tests\n\n\n\n\n\n\n9.3.8 Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n9.3.9 Significant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 <- exam %>% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "chap09.html#visualising-models",
    "href": "chap09.html#visualising-models",
    "title": "9  Visual Statistical Analysis",
    "section": "9.4 Visualising Models",
    "text": "9.4 Visualising Models\nIn this section, you will learn how to visualise model diagnostic and model parameters by using parameters package.\n\nToyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables."
  },
  {
    "objectID": "chap09.html#getting-started-1",
    "href": "chap09.html#getting-started-1",
    "title": "9  Visual Statistical Analysis",
    "section": "9.5 Getting Started",
    "text": "9.5 Getting Started"
  },
  {
    "objectID": "chap09.html#installing-and-loading-the-required-libraries",
    "href": "chap09.html#installing-and-loading-the-required-libraries",
    "title": "9  Visual Statistical Analysis",
    "section": "9.6 Installing and loading the required libraries",
    "text": "9.6 Installing and loading the required libraries\n\n\n\n\n\n\nDo-It-Yourself\n\n\n\n\npacman::p_load(readxl, performance, parameters, see)\n\n\n\n\n9.6.1 Importing Excel file: readxl methods\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale <- read_xls(\"chap09/data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   <dbl> <chr>    <dbl>     <dbl>     <dbl>    <dbl>  <dbl>         <dbl>  <dbl>\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period <dbl>, HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>, …\n\n\nNotice that the output object car_resale is a tibble data frame.\n\n\n9.6.2 Multiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\n9.6.3 Model Diagnostic: checking for multicolinearity:\nIn the code chunk, check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Guarantee_Period  1.04   [1.01, 1.17]         1.02      0.97     [0.86, 0.99]\n        Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n         Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\nHigh Correlation\n\n   Term  VIF   VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n     KM 1.46 [1.37, 1.57]         1.21      0.68     [0.64, 0.73]\n Weight 1.41 [1.32, 1.51]         1.19      0.71     [0.66, 0.76]\n\n\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n9.6.4 Model Diagnostic: checking normality assumption\nIn the code chunk, check_normality() of performance package.\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n <- check_normality(model1)\n\n\nplot(check_n)\n\n\n\n\n\n\n9.6.5 Model Diagnostic: Check model for homogeneity of variances\nIn the code chunk, check_heteroscedasticity() of performance package.\n\ncheck_h <- check_heteroscedasticity(model1)\n\n\nplot(check_h)\n\n\n\n\n\n\n9.6.6 Model Diagnostic: Complete check\nWe can also perform the complete by using check_model().\n\ncheck_model(model1)\n\n\n\n\n\n\n9.6.7 Visualising Regression Parameters: see methods\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(parameters(model1))\n\n\n\n\n\n\n9.6.8 Visualising Regression Parameters: ggcoefstats() methods\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "chap10.html#visualizing-the-uncertainty-of-point-estimates",
    "href": "chap10.html#visualizing-the-uncertainty-of-point-estimates",
    "title": "10  Visualising Uncertainty",
    "section": "10.2 Visualizing the uncertainty of point estimates",
    "text": "10.2 Visualizing the uncertainty of point estimates\n\nA point estimate is a single number, such as a mean.\nUncertainty is expressed as standard error, confidence interval, or credible interval\nImportant:\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\npacman::p_load(tidyverse, plotly, crosstalk, DT, ggdist, gganimate)\n\n\nexam <- read_csv(\"data/Exam_data.csv\")\n\n\n10.2.1 Visualizing the uncertainty of point estimates: ggplot2 methods\nThe code chunk below performs the followings:\n\ngroup the observation by RACE,\ncomputes the count of observations, mean, standard deviation and standard error of Maths by RACE, and\nsave the output as a tibble data table called my_sum.\n\n\nmy_sum <- exam %>%\n  group_by(RACE) %>%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %>%\n  mutate(se=sd/sqrt(n-1))\n\nNote: For the mathematical explanation, please refer to Slide 20 of Lesson 4.\nNext, the code chunk below will\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n \n  \n    RACE \n    n \n    mean \n    sd \n    se \n  \n \n\n  \n    Chinese \n    193 \n    76.50777 \n    15.69040 \n    1.132357 \n  \n  \n    Indian \n    12 \n    60.66667 \n    23.35237 \n    7.041005 \n  \n  \n    Malay \n    108 \n    57.44444 \n    21.13478 \n    2.043177 \n  \n  \n    Others \n    9 \n    69.66667 \n    10.72381 \n    3.791438 \n  \n\n\n\n\n\n\n\n10.2.2 Visualizing the uncertainty of point estimates: ggplot2 methods\nThe code chunk below is used to reveal the standard error of mean maths score by race.\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean \n          maths score by rac\")\n\n\n\n\n\n\n10.2.3 Visualizing the uncertainty of point estimates: ggplot2 methods\n\n\n\n\n\n\nYour turn\n\n\n\nPlot the 95% confidence interval of mean maths score by race. The error bars should be sorted by the average maths scores.\n\n\n\n\n\n\n\n\n\n10.2.4 Visualizing the uncertainty of point estimates with interactive error bars\n\n\n\n\n\n\nYour turn\n\n\n\nPlot interactive error bars for the 99% confidence interval of mean maths score by race."
  },
  {
    "objectID": "chap10.html#visualising-uncertainty-ggdist-package",
    "href": "chap10.html#visualising-uncertainty-ggdist-package",
    "title": "10  Visualising Uncertainty",
    "section": "10.3 Visualising Uncertainty: ggdist package",
    "text": "10.3 Visualising Uncertainty: ggdist package\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\n10.3.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %>%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +   #<<\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.\n\nexam %>%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n10.3.2 Visualizing the uncertainty of point estimates: ggdist methods\n\n\n\n\n\n\nYour turn\n\n\n\nMakeover the plot on previous slide by showing 95% and 99% confidence intervals.\n\n\n\nexam %>%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\n10.3.3 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %>%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail."
  },
  {
    "objectID": "chap10.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "chap10.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "10  Visualising Uncertainty",
    "section": "10.4 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "10.4 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\nStep 1: Installing ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nNote: You only need to perform this step once.\nStep 2: Launch the application in R\n\nlibrary(ungeviz)\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    size = 0.4, color = \"#0072B2\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "chap10.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "href": "chap10.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "title": "10  Visualising Uncertainty",
    "section": "10.5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "10.5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "chap11.html#overview",
    "href": "chap11.html#overview",
    "title": "11  Funnel Plots for Fair Comparisons",
    "section": "11.1 Overview",
    "text": "11.1 Overview\nFunnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "chap11.html#installing-and-launching-r-packages",
    "href": "chap11.html#installing-and-launching-r-packages",
    "title": "11  Funnel Plots for Fair Comparisons",
    "section": "11.2 Installing and Launching R Packages",
    "text": "11.2 Installing and Launching R Packages\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)"
  },
  {
    "objectID": "chap11.html#importing-data",
    "href": "chap11.html#importing-data",
    "title": "11  Funnel Plots for Fair Comparisons",
    "section": "11.3 Importing Data",
    "text": "11.3 Importing Data\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 <- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %>%\n  mutate_if(is.character, as.factor)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSub-district ID\nCity\nDistrict\nSub-district\nPositive\nRecovered\nDeath\n\n\n\n\n3172051003\nJAKARTA UTARA\nPADEMANGAN\nANCOL\n1776\n1691\n26\n\n\n3173041007\nJAKARTA BARAT\nTAMBORA\nANGKE\n1783\n1720\n29\n\n\n3175041005\nJAKARTA TIMUR\nKRAMAT JATI\nBALE KAMBANG\n2049\n1964\n31\n\n\n3175031003\nJAKARTA TIMUR\nJATINEGARA\nBALI MESTER\n827\n797\n13\n\n\n3175101006\nJAKARTA TIMUR\nCIPAYUNG\nBAMBU APUS\n2866\n2792\n27\n\n\n3174031002\nJAKARTA SELATAN\nMAMPANG PRAPATAN\nBANGKA\n1828\n1757\n26"
  },
  {
    "objectID": "chap11.html#funnelplotr-methods",
    "href": "chap11.html#funnelplotr-methods",
    "title": "11  Funnel Plots for Fair Comparisons",
    "section": "11.4 FunnelPlotR methods",
    "text": "11.4 FunnelPlotR methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n11.4.1 FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`\n)\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n11.4.2 FunnelPlotR methods: Makeover 1\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #<<\n  xrange = c(0, 6500),  #<<\n  yrange = c(0, 0.05)   #<<\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n11.4.3 FunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #<<           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #<<\n  y_label = \"Cumulative Fatality Rate\"  #<<\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "chap11.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "chap11.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "11  Funnel Plots for Fair Comparisons",
    "section": "11.5 Funnel Plot for Fair Visual Comparison: ggplot2 methods",
    "text": "11.5 Funnel Plot for Fair Visual Comparison: ggplot2 methods\nIn this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n11.5.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf <- covid19 %>%\n  mutate(rate = Death / Positive) %>%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %>%\n  filter(rate > 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n11.5.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq <- seq(1, max(df$Positive), 1)\nnumber.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI <- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n11.5.3 Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np <- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n11.5.4 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly <- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "chap11.html#references",
    "href": "chap11.html#references",
    "title": "11  Funnel Plots for Fair Comparisons",
    "section": "11.6 References",
    "text": "11.6 References\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  }
]